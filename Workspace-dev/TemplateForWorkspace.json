{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "sy-avgipsgadp-dev"
		},
		"LS_ADLSGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().pADLSGen2URL}"
		},
		"LS_AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().pKeyVaultBaseURL}"
		},
		"LS_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().pBaseURL}"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/PL_ClarityPPM_Cost_Plan_RawTables_SoapApi_Child')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set ClarityPPMEntityDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vClarityPPMEntityDirectory",
							"value": {
								"value": "@if(\n\tempty(pipeline().parameters.pSubDirectory),\n\tconcat(\n\t\tpipeline().parameters.ADLSFolder_ClarityPPM,\n\t\t'/',\n\t\tpipeline().parameters.pClarityPPMEntityName,\n\t\t'/Current'\n\t),\n\tconcat(\n\t\tpipeline().parameters.ADLSFolder_ClarityPPM,\n\t\t'/',\n\t\tpipeline().parameters.pClarityPPMEntityName,\n\t\t'/',\n\t\tpipeline().parameters.pSubDirectory,\n\t\t'/Current'\n\t)\n)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set QueryFilter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vQueryFilter",
							"value": {
								"value": "@concat(\n\t'<quer:param_start_year>',\n\tvariables('vStartYear'),\n\t'</quer:param_start_year>',\n\t'<quer:param_plan_name_multiple>',\n\tpipeline().parameters.pCostPlanNameList,\n\t'</quer:param_plan_name_multiple>'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartYear",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vStartYear",
							"value": {
								"value": "@pipeline().parameters.pStartYear",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Delete CurrentFolder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Set ClarityPPMEntityDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLSGen2_Binary",
								"type": "DatasetReference",
								"parameters": {
									"pADLSGen2URL": {
										"value": "@pipeline().parameters.ADLSGen2URL",
										"type": "Expression"
									},
									"pContainer": {
										"value": "@pipeline().parameters.ADLSContainer_Raw",
										"type": "Expression"
									},
									"pDirectory": {
										"value": "@variables('vClarityPPMEntityDirectory')",
										"type": "Expression"
									},
									"pFileName": {
										"value": "@concat('')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Until",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Delete CurrentFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set QueryFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('vExitUntil')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set RowOffset",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vRowOffset",
										"value": {
											"value": "@if(\n\tequals(int(variables('vRowOffsetTemp')), 0),\n\tpipeline().parameters.pRowOffset,\n\tvariables('vRowOffsetTemp')\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TimeTicks",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vTimeTicks",
										"value": {
											"value": "@{ticks(utcNow())}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set OutputFileName",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set RowOffset",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set TimeTicks",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vOutputFileName",
										"value": {
											"value": "@{pipeline().parameters.pClarityPPMEntityName}_@{variables('vTimeTicks')}_@{variables('vRowOffset')}.xml",
											"type": "Expression"
										}
									}
								},
								{
									"name": "vUntilTempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set OutputFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vUntilTempCounter",
										"value": {
											"value": "@string(add(int(variables('vUntilCounter')), 1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set UntilCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "vUntilTempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vUntilCounter",
										"value": {
											"value": "@variables('vUntilTempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy API to Data Lake",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set OutputFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"requestBody": {
													"value": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:quer=\"http://www.niku.com/xog/Query\">\n   <soapenv:Header>\n      <quer:Auth>\n         <quer:TenantID>clarity</quer:TenantID>\n         <quer:Username>@{pipeline().parameters.Username}</quer:Username>\n         <quer:Password>@{pipeline().parameters.Password}</quer:Password>\n      </quer:Auth>\n   </soapenv:Header>\n   <soapenv:Body>\n      <quer:Query>\n         <quer:Code>@{pipeline().parameters.pQueryCode}</quer:Code>\n         <quer:Filter>\n            @{variables('vQueryFilter')}\n            <quer:param_rowsoffset>@{variables('vRowOffset')}</quer:param_rowsoffset>\n         </quer:Filter>\n      </quer:Query>\n   </soapenv:Body>\n</soapenv:Envelope>",
													"type": "Expression"
												},
												"requestTimeout": "00:15:00"
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_HTTP_Binary",
											"type": "DatasetReference",
											"parameters": {
												"pBaseURL": {
													"value": "@pipeline().parameters.ClarityPPMSoapApiURL",
													"type": "Expression"
												},
												"pRelativeURL": "@concat('')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLSGen2_Binary",
											"type": "DatasetReference",
											"parameters": {
												"pADLSGen2URL": {
													"value": "@pipeline().parameters.ADLSGen2URL",
													"type": "Expression"
												},
												"pContainer": {
													"value": "@pipeline().parameters.ADLSContainer_Raw",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@variables('vClarityPPMEntityDirectory')",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@variables('vOutputFileName')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get FileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Copy API to Data Lake",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set UntilCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ADLSGen2_Binary",
											"type": "DatasetReference",
											"parameters": {
												"pADLSGen2URL": {
													"value": "@pipeline().parameters.ADLSGen2URL",
													"type": "Expression"
												},
												"pContainer": {
													"value": "@pipeline().parameters.ADLSContainer_Raw",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@variables('vClarityPPMEntityDirectory')",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@variables('vOutputFileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "Check FileSize",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get FileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get FileSize').output.size, int(variables('vMinimumFileSizeInBytes')))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set UntilCheck",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "vExitUntil",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set RowOffsetTemp",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "vRowOffsetTemp",
													"value": {
														"value": "@string(add(int(variables('vRowOffset')), int(variables('vRowOffsetIncrement'))))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set RowOffsetFinal",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Set RowOffsetTemp",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "vRowOffset",
													"value": {
														"value": "@variables('vRowOffsetTemp')",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set UntilCheckOnError",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check FileSize",
											"dependencyConditions": [
												"Failed",
												"Skipped"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vExitUntil",
										"value": {
											"value": "@bool(1)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Copy Current to Full",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{pipeline().parameters.pClarityPPMEntityName}*.xml",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ADLSGen2_Binary",
								"type": "DatasetReference",
								"parameters": {
									"pADLSGen2URL": {
										"value": "@pipeline().parameters.ADLSGen2URL",
										"type": "Expression"
									},
									"pContainer": {
										"value": "@pipeline().parameters.ADLSContainer_Raw",
										"type": "Expression"
									},
									"pDirectory": {
										"value": "@variables('vClarityPPMEntityDirectory')",
										"type": "Expression"
									},
									"pFileName": {
										"value": "@concat('')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGen2_Binary",
								"type": "DatasetReference",
								"parameters": {
									"pADLSGen2URL": {
										"value": "@pipeline().parameters.ADLSGen2URL",
										"type": "Expression"
									},
									"pContainer": {
										"value": "@pipeline().parameters.ADLSContainer_Raw",
										"type": "Expression"
									},
									"pDirectory": {
										"value": "@{replace(variables('vClarityPPMEntityDirectory'), '/Current', '/Full')}/@{substring(convertFromUtc(utcNow(), 'Central Standard Time'), 0, 4)}/@{substring(convertFromUtc(utcNow(), 'Central Standard Time'), 5, 2)}/@{substring(convertFromUtc(utcNow(), 'Central Standard Time'), 8, 2)}/@{pipeline().parameters.pClarityPPMEntityName}_@{ticks(utcNow())}",
										"type": "Expression"
									},
									"pFileName": {
										"value": "@concat('')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pStartYear": {
						"type": "string",
						"defaultValue": "@pipeline().parameters.pStartYear"
					},
					"pRowOffset": {
						"type": "string",
						"defaultValue": "0"
					},
					"pQueryCode": {
						"type": "string",
						"defaultValue": "ava_int_dtl_ip_all_data_rpt"
					},
					"pClarityPPMEntityType": {
						"type": "string"
					},
					"pClarityPPMEntityName": {
						"type": "string"
					},
					"pCostPlanNameList": {
						"type": "string"
					},
					"pSubDirectory": {
						"type": "string"
					},
					"ADLSFolder_ClarityPPM": {
						"type": "string"
					},
					"ADLSGen2URL": {
						"type": "string"
					},
					"ADLSContainer_Raw": {
						"type": "string"
					},
					"ClarityPPMSoapApiURL": {
						"type": "string",
						"defaultValue": "https://cppm9300.ondemand.ca.com/niku/xog"
					},
					"Username": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"variables": {
					"vRowOffsetIncrement": {
						"type": "String",
						"defaultValue": "3000"
					},
					"vRowOffsetTemp": {
						"type": "String",
						"defaultValue": "0"
					},
					"vRowOffset": {
						"type": "String",
						"defaultValue": "0"
					},
					"vExitUntil": {
						"type": "Boolean",
						"defaultValue": false
					},
					"vTimeTicks": {
						"type": "String"
					},
					"vOutputFileName": {
						"type": "String"
					},
					"vMinimumFileSizeInBytes": {
						"type": "String",
						"defaultValue": "1000"
					},
					"vClarityPPMSoapApiPassword": {
						"type": "String"
					},
					"vStartYear": {
						"type": "String"
					},
					"vClarityPPMEntityDirectory": {
						"type": "String"
					},
					"vUntilTempCounter": {
						"type": "String",
						"defaultValue": "0"
					},
					"vUntilCounter": {
						"type": "String",
						"defaultValue": "0"
					},
					"vQueryFilter": {
						"type": "String"
					},
					"KeyVaultBaseURL": {
						"type": "String"
					},
					"ClarityPPMSoapApiPasswordSecretName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ClarityPPM"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T09:06:02Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Binary')]",
				"[concat(variables('workspaceId'), '/datasets/DS_HTTP_Binary')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_ClarityPPM_Cost_Plan_RawTables_SoapApi_Master')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Child Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ClarityPPM_Cost_Plan_RawTables_SoapApi_Child",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pStartYear": {
									"value": "@pipeline().parameters.pStartYear",
									"type": "Expression"
								},
								"pRowOffset": {
									"value": "0",
									"type": "Expression"
								},
								"pQueryCode": {
									"value": "ava_int_dtl_ip_all_data_rpt",
									"type": "Expression"
								},
								"pClarityPPMEntityType": {
									"value": "Report",
									"type": "Expression"
								},
								"pClarityPPMEntityName": {
									"value": "DETAILED_IP_REPORT",
									"type": "Expression"
								},
								"pCostPlanNameList": {
									"value": "@pipeline().parameters.pCostPlanNameList",
									"type": "Expression"
								},
								"pSubDirectory": {
									"value": "@pipeline().parameters.pSubDirectory",
									"type": "Expression"
								},
								"ADLSFolder_ClarityPPM": {
									"value": "ClarityPPM",
									"type": "Expression"
								},
								"ADLSGen2URL": {
									"value": "@pipeline().parameters.ADLSGen2URL",
									"type": "Expression"
								},
								"ADLSContainer_Raw": {
									"value": "@pipeline().parameters.ADLSContainer",
									"type": "Expression"
								},
								"ClarityPPMSoapApiURL": {
									"value": "https://cppm9300.ondemand.ca.com/niku/xog",
									"type": "Expression"
								},
								"Username": "PPMODataUser",
								"Password": "47b@2^KLtPtB"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pClarityPPMEntityNameList": {
						"type": "string"
					},
					"pStartYear": {
						"type": "string"
					},
					"pCostPlanNameList": {
						"type": "string"
					},
					"pSubDirectory": {
						"type": "string"
					},
					"ADLSGen2URL": {
						"type": "string"
					},
					"ADLSContainer": {
						"type": "string"
					}
				},
				"variables": {
					"vClarityPPMSoapApiConfigFileName": {
						"type": "String",
						"defaultValue": "ClarityPPMSoapApiConfig"
					}
				},
				"folder": {
					"name": "ClarityPPM"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T09:06:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_ClarityPPM_Cost_Plan_RawTables_SoapApi_Child')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_ClarityPPM_Last_Approved_Budget_RawTables_SoapApi_Child')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set ClarityPPMEntityDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vClarityPPMEntityDirectory",
							"value": {
								"value": "@if(\n\tempty(pipeline().parameters.pSubDirectory),\n\tconcat(\n\t\tpipeline().parameters.ADLSFolder_ClarityPPM,\n\t\t'/',\n\t\tpipeline().parameters.pClarityPPMEntityName,\n\t\t'/Current'\n\t),\n\tconcat(\n\t\tpipeline().parameters.ADLSFolder_ClarityPPM,\n\t\t'/',\n\t\tpipeline().parameters.pClarityPPMEntityName,\n\t\t'/',\n\t\tpipeline().parameters.pSubDirectory,\n\t\t'/Current'\n\t)\n)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set QueryFilter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vQueryFilter",
							"value": {
								"value": "@concat('<quer:plan_type_code>',\n        'BUDGET',\n        '</quer:plan_type_code>',\n        '<quer:is_plan_of_record>',\n        '1',\n        '</quer:is_plan_of_record>',\n        '<quer:is_capital>',\n        '1',\n        '</quer:is_capital>',\n        '<quer:param_start_year>',\n        variables('vStartYear'),\n        '</quer:param_start_year>')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartYear",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vStartYear",
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy') ",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Delete CurrentFolder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Set ClarityPPMEntityDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLSGen2_Binary",
								"type": "DatasetReference",
								"parameters": {
									"pADLSGen2URL": {
										"value": "@pipeline().parameters.ADLSGen2URL",
										"type": "Expression"
									},
									"pContainer": {
										"value": "@pipeline().parameters.ADLSContainer_Raw",
										"type": "Expression"
									},
									"pDirectory": {
										"value": "@variables('vClarityPPMEntityDirectory')",
										"type": "Expression"
									},
									"pFileName": {
										"value": "@concat('')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Until",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Delete CurrentFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set QueryFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('vExitUntil')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set RowOffset",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vRowOffset",
										"value": {
											"value": "@if(\n\tequals(int(variables('vRowOffsetTemp')), 0),\n\tpipeline().parameters.pRowOffset,\n\tvariables('vRowOffsetTemp')\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TimeTicks",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vTimeTicks",
										"value": {
											"value": "@{ticks(utcNow())}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set OutputFileName",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set RowOffset",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set TimeTicks",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vOutputFileName",
										"value": {
											"value": "@{pipeline().parameters.pClarityPPMEntityName}_@{variables('vTimeTicks')}_@{variables('vRowOffset')}.xml",
											"type": "Expression"
										}
									}
								},
								{
									"name": "vUntilTempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set OutputFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vUntilTempCounter",
										"value": {
											"value": "@string(add(int(variables('vUntilCounter')), 1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set UntilCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "vUntilTempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vUntilCounter",
										"value": {
											"value": "@variables('vUntilTempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy API to Data Lake",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set OutputFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"requestBody": {
													"value": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:quer=\"http://www.niku.com/xog/Query\">\n   <soapenv:Header>\n      <quer:Auth>\n         <quer:TenantID>clarity</quer:TenantID>\n         <quer:Username>@{pipeline().parameters.UserName}</quer:Username>\n         <quer:Password>@{pipeline().parameters.Password}</quer:Password>\n      </quer:Auth>\n   </soapenv:Header>\n   <soapenv:Body>\n      <quer:Query>\n         <quer:Code>@{pipeline().parameters.pQueryCode}</quer:Code>\n         <quer:Filter>\n            @{variables('vQueryFilter')}\n            <quer:param_rowsoffset>@{variables('vRowOffset')}</quer:param_rowsoffset>\n         </quer:Filter>\n      </quer:Query>\n   </soapenv:Body>\n</soapenv:Envelope>",
													"type": "Expression"
												},
												"requestTimeout": "00:15:00"
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_HTTP_Binary",
											"type": "DatasetReference",
											"parameters": {
												"pBaseURL": {
													"value": "@pipeline().parameters.ClarityPPMSoapApiURL",
													"type": "Expression"
												},
												"pRelativeURL": "@concat('')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLSGen2_Binary",
											"type": "DatasetReference",
											"parameters": {
												"pADLSGen2URL": {
													"value": "@pipeline().parameters.ADLSGen2URL",
													"type": "Expression"
												},
												"pContainer": {
													"value": "@pipeline().parameters.ADLSContainer_Raw",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@variables('vClarityPPMEntityDirectory')",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@variables('vOutputFileName')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get FileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Copy API to Data Lake",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set UntilCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ADLSGen2_Binary",
											"type": "DatasetReference",
											"parameters": {
												"pADLSGen2URL": {
													"value": "@pipeline().parameters.ADLSGen2URL",
													"type": "Expression"
												},
												"pContainer": {
													"value": "@pipeline().parameters.ADLSContainer_Raw",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@variables('vClarityPPMEntityDirectory')",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@variables('vOutputFileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "Check FileSize",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get FileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get FileSize').output.size, int(variables('vMinimumFileSizeInBytes')))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set UntilCheck",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "vExitUntil",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set RowOffsetTemp",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "vRowOffsetTemp",
													"value": {
														"value": "@string(add(int(variables('vRowOffset')), int(variables('vRowOffsetIncrement'))))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set RowOffsetFinal",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Set RowOffsetTemp",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "vRowOffset",
													"value": {
														"value": "@variables('vRowOffsetTemp')",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set UntilCheckOnError",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check FileSize",
											"dependencyConditions": [
												"Failed",
												"Skipped"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vExitUntil",
										"value": {
											"value": "@bool(1)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Copy Current to Full",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{pipeline().parameters.pClarityPPMEntityName}*.xml",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ADLSGen2_Binary",
								"type": "DatasetReference",
								"parameters": {
									"pADLSGen2URL": {
										"value": "@pipeline().parameters.ADLSGen2URL",
										"type": "Expression"
									},
									"pContainer": {
										"value": "@pipeline().parameters.ADLSContainer_Raw",
										"type": "Expression"
									},
									"pDirectory": {
										"value": "@variables('vClarityPPMEntityDirectory')",
										"type": "Expression"
									},
									"pFileName": {
										"value": "@concat('')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGen2_Binary",
								"type": "DatasetReference",
								"parameters": {
									"pADLSGen2URL": {
										"value": "@pipeline().parameters.ADLSGen2URL",
										"type": "Expression"
									},
									"pContainer": {
										"value": "@pipeline().parameters.ADLSContainer_Raw",
										"type": "Expression"
									},
									"pDirectory": {
										"value": "@{replace(variables('vClarityPPMEntityDirectory'), '/Current', '/Full')}/@{substring(convertFromUtc(utcNow(), 'Central Standard Time'), 0, 4)}/@{substring(convertFromUtc(utcNow(), 'Central Standard Time'), 5, 2)}/@{substring(convertFromUtc(utcNow(), 'Central Standard Time'), 8, 2)}/@{pipeline().parameters.pClarityPPMEntityName}_@{ticks(utcNow())}",
										"type": "Expression"
									},
									"pFileName": {
										"value": "@concat('')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pRowOffset": {
						"type": "string",
						"defaultValue": "0"
					},
					"pQueryCode": {
						"type": "string",
						"defaultValue": "ava_int_dtl_ip_all_data_rpt"
					},
					"pClarityPPMEntityType": {
						"type": "string"
					},
					"pClarityPPMEntityName": {
						"type": "string"
					},
					"pSubDirectory": {
						"type": "string"
					},
					"ADLSFolder_ClarityPPM": {
						"type": "string"
					},
					"ADLSGen2URL": {
						"type": "string",
						"defaultValue": "https://mduse2avangridsa01.dfs.core.windows.net/"
					},
					"ADLSContainer_Raw": {
						"type": "string"
					},
					"ClarityPPMSoapApiURL": {
						"type": "string",
						"defaultValue": "https://cppm9300.ondemand.ca.com/niku/xog"
					},
					"UserName": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"variables": {
					"vRowOffsetIncrement": {
						"type": "String",
						"defaultValue": "3000"
					},
					"vRowOffsetTemp": {
						"type": "String",
						"defaultValue": "0"
					},
					"vRowOffset": {
						"type": "String",
						"defaultValue": "0"
					},
					"vExitUntil": {
						"type": "Boolean",
						"defaultValue": false
					},
					"vTimeTicks": {
						"type": "String"
					},
					"vOutputFileName": {
						"type": "String"
					},
					"vMinimumFileSizeInBytes": {
						"type": "String",
						"defaultValue": "1000"
					},
					"vClarityPPMSoapApiPassword": {
						"type": "String"
					},
					"vStartYear": {
						"type": "String"
					},
					"vClarityPPMEntityDirectory": {
						"type": "String"
					},
					"vUntilTempCounter": {
						"type": "String",
						"defaultValue": "0"
					},
					"vUntilCounter": {
						"type": "String",
						"defaultValue": "0"
					},
					"vQueryFilter": {
						"type": "String"
					},
					"KeyVaultBaseURL": {
						"type": "String"
					},
					"ClarityPPMSoapApiPasswordSecretName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ClarityPPM"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T09:39:51Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Binary')]",
				"[concat(variables('workspaceId'), '/datasets/DS_HTTP_Binary')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_ClarityPPM_Last_Approved_Budget_RawTables_SoapApi_Master')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Child Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ClarityPPM_Last_Approved_Budget_RawTables_SoapApi_Child",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pRowOffset": {
									"value": "0",
									"type": "Expression"
								},
								"pQueryCode": {
									"value": "ava_int_dtl_ip_all_data_rpt",
									"type": "Expression"
								},
								"pClarityPPMEntityType": {
									"value": "Report",
									"type": "Expression"
								},
								"pClarityPPMEntityName": {
									"value": "DETAILED_IP_REPORT",
									"type": "Expression"
								},
								"pSubDirectory": {
									"value": "@pipeline().parameters.pSubDirectory",
									"type": "Expression"
								},
								"ADLSFolder_ClarityPPM": {
									"value": "ClarityPPM",
									"type": "Expression"
								},
								"ADLSGen2URL": {
									"value": "@pipeline().parameters.pADLSGen2Url",
									"type": "Expression"
								},
								"ADLSContainer_Raw": {
									"value": "raw",
									"type": "Expression"
								},
								"ClarityPPMSoapApiURL": {
									"value": "https://cppm9300.ondemand.ca.com/niku/xog",
									"type": "Expression"
								},
								"UserName": {
									"value": "@concat('PPMODataUser')",
									"type": "Expression"
								},
								"Password": {
									"value": "@concat('47b@2^KLtPtB')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pClarityPPMEntityNameList": {
						"type": "string"
					},
					"pSubDirectory": {
						"type": "string"
					},
					"pADLSGen2Url": {
						"type": "string"
					}
				},
				"variables": {
					"vClarityPPMSoapApiConfigFileName": {
						"type": "String",
						"defaultValue": "ClarityPPMSoapApiConfig"
					}
				},
				"folder": {
					"name": "ClarityPPM"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T09:40:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_ClarityPPM_Last_Approved_Budget_RawTables_SoapApi_Child')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Fact_Cost_Plan_Upload')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "If FilePresent",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(empty(pipeline().parameters.CostPlanName))\n\n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SoapApiMaster",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ClarityPPM_Cost_Plan_RawTables_SoapApi_Master",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pClarityPPMEntityNameList": "DETAILED_IP_REPORT",
											"pStartYear": {
												"value": "@pipeline().parameters.Year",
												"type": "Expression"
											},
											"pCostPlanNameList": {
												"value": "@pipeline().parameters.CostPlanName",
												"type": "Expression"
											},
											"pSubDirectory": {
												"value": "@variables('vDetailedIPReportSubDirectory')",
												"type": "Expression"
											},
											"ADLSGen2URL": {
												"value": "@variables('ADLSGen2URL')",
												"type": "Expression"
											},
											"ADLSContainer": {
												"value": "@variables('ADLSContainerRaw')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "PL_XML_Parquet_CostPlan",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute SoapApiMaster",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_XML_Parquet_CostPlan",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"CostPlan": {
												"value": "@pipeline().parameters.CostPlanName",
												"type": "Expression"
											},
											"Year": {
												"value": "@pipeline().parameters.Year",
												"type": "Expression"
											},
											"ProducedDirectory": {
												"value": "@concat('Migrate_Produced/Produced_27_02/CostPlans')",
												"type": "Expression"
											},
											"RefinedDirectory": {
												"value": "@concat('Common/CostPlans')",
												"type": "Expression"
											},
											"ADLSGen2URL": {
												"value": "@variables('ADLSGen2URL')",
												"type": "Expression"
											},
											"ADLSContainerRefined": {
												"value": "@variables('ADLSContainerRefined')",
												"type": "Expression"
											},
											"ADLSContainerProduced": {
												"value": "@variables('ADLSContainerProduced')",
												"type": "Expression"
											},
											"ADLSContainerRaw": {
												"value": "@variables('ADLSContainerRaw')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CostPlanName": {
						"type": "string",
						"defaultValue": "2023 FC 9+3"
					},
					"Year": {
						"type": "string",
						"defaultValue": "2023"
					}
				},
				"variables": {
					"vDetailedIPReportSubDirectory": {
						"type": "String",
						"defaultValue": "CostPlan"
					},
					"ADLSGen2URL": {
						"type": "String",
						"defaultValue": "https://dlssyavgipsgadpdev.dfs.core.windows.net/"
					},
					"ADLSContainerRaw": {
						"type": "String",
						"defaultValue": "raw"
					},
					"ADLSContainerRefined": {
						"type": "String",
						"defaultValue": "refined"
					},
					"ADLSContainerProduced": {
						"type": "String",
						"defaultValue": "produced"
					}
				},
				"folder": {
					"name": "Facts"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-27T10:58:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_ClarityPPM_Cost_Plan_RawTables_SoapApi_Master')]",
				"[concat(variables('workspaceId'), '/pipelines/PL_XML_Parquet_CostPlan')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Fact_Last_Approved_Budget')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute SoapApiMaster_approvedBudget",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ClarityPPM_Last_Approved_Budget_RawTables_SoapApi_Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pClarityPPMEntityNameList": "DETAILED_IP_REPORT",
								"pSubDirectory": {
									"value": "@variables('vDetailedIPReportSubDirectory')",
									"type": "Expression"
								},
								"pADLSGen2Url": {
									"value": "@pipeline().parameters.ADLSGen2URL",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_XML_Parquet_ApprovedBudget",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute SoapApiMaster_approvedBudget",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_XML_Parquet_ApprovedBudget",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"AppovedBudget": {
									"value": "@variables('ApprovedBudgetFileName')",
									"type": "Expression"
								},
								"ProducedDirectory": {
									"value": "@concat('ApprovedBudget')",
									"type": "Expression"
								},
								"RefinedDirectory": {
									"value": "@concat('ApprovedBudget')",
									"type": "Expression"
								},
								"ADLSGen2URL": {
									"value": "@pipeline().parameters.ADLSGen2URL",
									"type": "Expression"
								},
								"ADLSContainerRefined": {
									"value": "@pipeline().parameters.ADLSContainerRefined",
									"type": "Expression"
								},
								"ADLSContainerProduced": {
									"value": "@pipeline().parameters.ADLSContainerProduced",
									"type": "Expression"
								},
								"ADLSContainerRaw": {
									"value": "@pipeline().parameters.ADLSContainerRaw",
									"type": "Expression"
								},
								"pYear": {
									"value": "@formatDateTime(utcNow(), 'yyyy')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ADLSGen2URL": {
						"type": "string",
						"defaultValue": "https://dlssyavgipsgadpdev.dfs.core.windows.net/"
					},
					"ADLSContainerRaw": {
						"type": "string",
						"defaultValue": "raw"
					},
					"ADLSContainerRefined": {
						"type": "string",
						"defaultValue": "refined"
					},
					"ADLSContainerProduced": {
						"type": "string",
						"defaultValue": "produced"
					}
				},
				"variables": {
					"vDetailedIPReportSubDirectory": {
						"type": "String",
						"defaultValue": "ApprovedBudget"
					},
					"ApprovedBudgetFileName": {
						"type": "String",
						"defaultValue": "ApprovedBudget"
					}
				},
				"folder": {
					"name": "Facts"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-23T07:54:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_ClarityPPM_Last_Approved_Budget_RawTables_SoapApi_Master')]",
				"[concat(variables('workspaceId'), '/pipelines/PL_XML_Parquet_ApprovedBudget')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_HistoricDataLoad')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set RefinedParquetFilename",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "refinedParquetFilename",
							"value": {
								"value": "@replace(pipeline().parameters.rawExcelFilename, '.xlsx', '.parquet')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set YEAR",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set RefinedParquetFilename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@int(substring(pipeline().parameters.rawExcelFilename, 0, 4))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExceltoParquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set YEAR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_ExcelToParquet_Historic",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "@variables('year')",
										"type": "Expression"
									},
									"targetFilename": {
										"value": "'@{variables('refinedParquetFilename')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ExcelSource": {
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										},
										"pContainer": {
											"value": "@pipeline().parameters.rawContainer",
											"type": "Expression"
										},
										"pDirectory": {
											"value": "@pipeline().parameters.rawExcelDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@pipeline().parameters.rawExcelFilename",
											"type": "Expression"
										},
										"pSheetName": {
											"value": "@pipeline().parameters.rawExcelsheetName",
											"type": "Expression"
										}
									},
									"ParquetSink": {
										"pContainer": {
											"value": "@pipeline().parameters.refinedContainer",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.refinedParquetDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@variables('refinedParquetFilename')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ParquetMonthlyYearlyInfoDivide",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Check to run Allocated Budget",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_ParquetYearlyMonthyInfo_Historic",
								"type": "DataFlowReference",
								"parameters": {
									"tagertYearlyDirectory": {
										"value": "'@{concat(pipeline().parameters.producedDirectory, '/Yearly')}'",
										"type": "Expression"
									},
									"targetMonthlyDirectory": {
										"value": "'@{concat(pipeline().parameters.producedDirectory, '/Monthly')}'",
										"type": "Expression"
									},
									"targetInfoDirectroy": {
										"value": "'@{concat(pipeline().parameters.producedDirectory, '/Info')}'",
										"type": "Expression"
									},
									"year": {
										"value": "@variables('year')",
										"type": "Expression"
									},
									"sourceFilename": {
										"value": "'@{variables('refinedParquetFilename')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ParquetSource": {
										"pContainer": {
											"value": "@pipeline().parameters.refinedContainer",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.refinedParquetDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@variables('refinedParquetFilename')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"CostPlanInfoSink": {
										"pContainer": {
											"value": "@pipeline().parameters.producedContainer",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat(pipeline().parameters.producedDirectory, '/Info')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"MonthlySink": {
										"pContainer": {
											"value": "@pipeline().parameters.producedContainer",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat(pipeline().parameters.producedDirectory, '/Monthly')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"YearlySink": {
										"pContainer": {
											"value": "@pipeline().parameters.producedContainer",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat(pipeline().parameters.producedDirectory, '/Yearly')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Check to run Allocated Budget",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ExceltoParquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.CommonAllocationFlag)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CommonAllocationLogic",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF_CommonAllocation_Historic",
											"type": "DataFlowReference",
											"parameters": {
												"TargetFilename": {
													"value": "'@{variables('refinedParquetFilename')}'",
													"type": "Expression"
												},
												"Year": {
													"value": "@variables('year')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Commonparquet": {
													"pContainer": {
														"value": "@pipeline().parameters.refinedContainer",
														"type": "Expression"
													},
													"pDirectoryName": {
														"value": "@pipeline().parameters.refinedParquetDirectory",
														"type": "Expression"
													},
													"pFileName": {
														"value": "@variables('refinedParquetFilename')",
														"type": "Expression"
													},
													"pADLSGen2URL": {
														"value": "@pipeline().parameters.ADLSGen2URL",
														"type": "Expression"
													}
												},
												"CommonAllocationMaster": {
													"pADLSGen2URL": {
														"value": "@pipeline().parameters.ADLSGen2URL",
														"type": "Expression"
													},
													"pContainer": {
														"value": "@variables('commonAllocationContainer')",
														"type": "Expression"
													},
													"pDirectory": {
														"value": "@variables('commonAllocationDirectory')",
														"type": "Expression"
													},
													"pFileName": {
														"value": "@variables('commonAllocationFilename')",
														"type": "Expression"
													},
													"pSheetName": {
														"value": "@variables('commonAllocationSheetname')",
														"type": "Expression"
													}
												},
												"approvedbudgetUpdated": {
													"pContainer": {
														"value": "@pipeline().parameters.refinedContainer",
														"type": "Expression"
													},
													"pDirectoryName": {
														"value": "@pipeline().parameters.refinedParquetDirectory",
														"type": "Expression"
													},
													"pFileName": {
														"value": "@variables('refinedParquetFilename')",
														"type": "Expression"
													},
													"pADLSGen2URL": {
														"value": "@pipeline().parameters.ADLSGen2URL",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rawContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"rawExcelDirectory": {
						"type": "string",
						"defaultValue": "Facts/Fact_Governance_PriorYearActuals/2022"
					},
					"rawExcelFilename": {
						"type": "string",
						"defaultValue": "2022_Capex_Actuals_RBA_12+0.xlsx"
					},
					"rawExcelsheetName": {
						"type": "string",
						"defaultValue": "Capex_actual"
					},
					"refinedContainer": {
						"type": "string",
						"defaultValue": "refined"
					},
					"refinedParquetDirectory": {
						"type": "string",
						"defaultValue": "Actuals"
					},
					"producedContainer": {
						"type": "string",
						"defaultValue": "produced"
					},
					"producedDirectory": {
						"type": "string",
						"defaultValue": "Actuals"
					},
					"ADLSGen2URL": {
						"type": "string",
						"defaultValue": "https://dlssyavgipsgadpdev.dfs.core.windows.net/"
					},
					"CommonAllocationFlag": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"refinedParquetFilename": {
						"type": "String"
					},
					"year": {
						"type": "Integer"
					},
					"commonAllocationContainer": {
						"type": "String",
						"defaultValue": "raw"
					},
					"commonAllocationDirectory": {
						"type": "String",
						"defaultValue": "config/CommonAllocation"
					},
					"commonAllocationFilename": {
						"type": "String",
						"defaultValue": "CommonAllocation.xlsx"
					},
					"commonAllocationSheetname": {
						"type": "String",
						"defaultValue": "CommonAllocation"
					}
				},
				"folder": {
					"name": "Historic Load"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T11:25:08Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF_ExcelToParquet_Historic')]",
				"[concat(variables('workspaceId'), '/dataflows/DF_ParquetYearlyMonthyInfo_Historic')]",
				"[concat(variables('workspaceId'), '/dataflows/DF_CommonAllocation_Historic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_XML_Parquet_ApprovedBudget')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Convert Approved Budget XML to Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Xml_Parquet_ApprovedBudget",
								"type": "DataFlowReference",
								"parameters": {
									"SourceDirectoryWildcard": "'ClarityPPM/DETAILED_IP_REPORT/ApprovedBudget/Current/DETAILED_IP_REPORT_*.xml'",
									"TargetFilename": {
										"value": "'@{concat(pipeline().parameters.AppovedBudget, '.parquet')}'",
										"type": "Expression"
									},
									"Year": {
										"value": "@pipeline().parameters.pYear",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CostPlanXML": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRaw",
											"type": "Expression"
										},
										"pDirectory": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"Costplanparquet": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRefined",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.RefinedDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Break down Info Yearly Monthly",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "dfCommonAllocation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Info_Monthly_Yearly_parquet_ApprovedBudget",
								"type": "DataFlowReference",
								"parameters": {
									"ProducedDirectory": {
										"value": "'@{pipeline().parameters.ProducedDirectory}'",
										"type": "Expression"
									},
									"Year": {
										"value": "@pipeline().parameters.pYear",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Commonparquet": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRefined",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.RefinedDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat(pipeline().parameters.AppovedBudget,'.parquet')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"Costplanparquet": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerProduced",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"sinkYearly": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerProduced",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"sinkMonthly": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerProduced",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dfCommonAllocation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Convert Approved Budget XML to Parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CommonAllocation_ApprovedBudget",
								"type": "DataFlowReference",
								"parameters": {
									"TargetFilename": {
										"value": "'@{concat(pipeline().parameters.AppovedBudget, '.parquet')}'",
										"type": "Expression"
									},
									"Year": {
										"value": "@pipeline().parameters.pYear",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Commonparquet": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRefined",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.RefinedDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat(pipeline().parameters.AppovedBudget, '.parquet')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"CommonAllocationMaster": {
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										},
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRaw",
											"type": "Expression"
										},
										"pDirectory": "config/CommonAllocation",
										"pFileName": "CommonAllocation.xlsx",
										"pSheetName": "CommonAllocation"
									},
									"approvedbudgetUpdated": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRefined",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.RefinedDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"AppovedBudget": {
						"type": "string",
						"defaultValue": "Fact_ApprovedBudget"
					},
					"ProducedDirectory": {
						"type": "string",
						"defaultValue": "Facts/Fact_ApprovedBudget"
					},
					"RefinedDirectory": {
						"type": "string",
						"defaultValue": "Facts/Fact_ApprovedBudget/Common"
					},
					"ADLSGen2URL": {
						"type": "string",
						"defaultValue": "https://mduse2avangridsa01.dfs.core.windows.net/"
					},
					"ADLSContainerRefined": {
						"type": "string",
						"defaultValue": "refined"
					},
					"ADLSContainerProduced": {
						"type": "string",
						"defaultValue": "refined"
					},
					"ADLSContainerRaw": {
						"type": "string",
						"defaultValue": "raw"
					},
					"pYear": {
						"type": "int"
					}
				},
				"folder": {
					"name": "Facts"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-23T07:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF_Xml_Parquet_ApprovedBudget')]",
				"[concat(variables('workspaceId'), '/dataflows/DF_Info_Monthly_Yearly_parquet_ApprovedBudget')]",
				"[concat(variables('workspaceId'), '/dataflows/DF_CommonAllocation_ApprovedBudget')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_XML_Parquet_CostPlan')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Convert CostPlan XML to Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Xml_Parquet_CostPlan",
								"type": "DataFlowReference",
								"parameters": {
									"SourceDirectoryWildcard": {
										"value": "'@{'ClarityPPM/DETAILED_IP_REPORT/CostPlan/Current/DETAILED_IP_REPORT_*.xml'}'",
										"type": "Expression"
									},
									"TargetFilename": {
										"value": "'@{concat(pipeline().parameters.CostPlan, '.parquet')}'",
										"type": "Expression"
									},
									"Year": {
										"value": "@pipeline().parameters.Year",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CostPlanXML": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRaw",
											"type": "Expression"
										},
										"pDirectory": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"Costplanparquet": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRefined",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.RefinedDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Break down Info Yearly Monthly",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Common Allocation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Info_Monthly_Yearly_parquet_CostPlan",
								"type": "DataFlowReference",
								"parameters": {
									"ProducedDirectory": {
										"value": "'@{pipeline().parameters.ProducedDirectory}'",
										"type": "Expression"
									},
									"Year": {
										"value": "@pipeline().parameters.Year",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Commonparquet": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRefined",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.RefinedDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat(pipeline().parameters.CostPlan,'.parquet')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"Costplanparquet": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerProduced",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"sinkYearly": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerProduced",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"sinkMonthly": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerProduced",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat('')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Common Allocation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Convert CostPlan XML to Parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CommonAllocation_CostPlan",
								"type": "DataFlowReference",
								"parameters": {
									"CostPlan": {
										"value": "'@{pipeline().parameters.CostPlan}'",
										"type": "Expression"
									},
									"TargetFilename": {
										"value": "'@{concat(pipeline().parameters.CostPlan, '.parquet')}'",
										"type": "Expression"
									},
									"Year": {
										"value": "@pipeline().parameters.Year",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Commonparquet": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRefined",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.RefinedDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat(pipeline().parameters.CostPlan, '.parquet')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									},
									"CommonAllocationMaster": {
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										},
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRaw",
											"type": "Expression"
										},
										"pDirectory": "config/CommonAllocation",
										"pFileName": "CommonAllocation.xlsx",
										"pSheetName": "CommonAllocation"
									},
									"CostPlanUpdated": {
										"pContainer": {
											"value": "@pipeline().parameters.ADLSContainerRefined",
											"type": "Expression"
										},
										"pDirectoryName": {
											"value": "@pipeline().parameters.RefinedDirectory",
											"type": "Expression"
										},
										"pFileName": {
											"value": "@concat(pipeline().parameters.CostPlan, '.parquet')",
											"type": "Expression"
										},
										"pADLSGen2URL": {
											"value": "@pipeline().parameters.ADLSGen2URL",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CostPlan": {
						"type": "string",
						"defaultValue": "2023 FC 9+3"
					},
					"Year": {
						"type": "string",
						"defaultValue": "2023"
					},
					"ProducedDirectory": {
						"type": "string",
						"defaultValue": "Facts/Fact_CostPlans"
					},
					"RefinedDirectory": {
						"type": "string",
						"defaultValue": "Facts/Fact_CostPlans/Common"
					},
					"ADLSGen2URL": {
						"type": "string",
						"defaultValue": "https://mduse2avangridsa01.dfs.core.windows.net/"
					},
					"ADLSContainerRefined": {
						"type": "string",
						"defaultValue": "refined"
					},
					"ADLSContainerProduced": {
						"type": "string",
						"defaultValue": "refined"
					},
					"ADLSContainerRaw": {
						"type": "string",
						"defaultValue": "raw"
					}
				},
				"variables": {
					"tttt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Facts"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-21T08:15:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF_Xml_Parquet_CostPlan')]",
				"[concat(variables('workspaceId'), '/dataflows/DF_Info_Monthly_Yearly_parquet_CostPlan')]",
				"[concat(variables('workspaceId'), '/dataflows/DF_CommonAllocation_CostPlan')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLSGen2_Binary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGen2",
					"type": "LinkedServiceReference",
					"parameters": {
						"pADLSGen2URL": {
							"value": "@dataset().pADLSGen2URL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pADLSGen2URL": {
						"type": "string"
					},
					"pContainer": {
						"type": "string"
					},
					"pDirectory": {
						"type": "string"
					},
					"pFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().pDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().pContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLSGen2_Excel')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGen2",
					"type": "LinkedServiceReference",
					"parameters": {
						"pADLSGen2URL": {
							"value": "@dataset().pADLSGen2URL",
							"type": "Expression"
						},
						"pKeyVaultBaseURL": "https://kv-avgipsgadp-dev.vault.azure.net/"
					}
				},
				"parameters": {
					"pADLSGen2URL": {
						"type": "string"
					},
					"pContainer": {
						"type": "string"
					},
					"pDirectory": {
						"type": "string"
					},
					"pFileName": {
						"type": "string"
					},
					"pSheetName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().pSheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().pDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().pContainer",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					},
					{
						"name": "Project Charge Code",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "CompanyShort",
						"type": "String"
					},
					{
						"name": "ChargeCodeShort",
						"type": "String"
					},
					{
						"name": "BudgetRatio",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLSGen2_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGen2",
					"type": "LinkedServiceReference",
					"parameters": {
						"pADLSGen2URL": {
							"value": "@dataset().pADLSGen2URL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pContainer": {
						"type": "string"
					},
					"pDirectoryName": {
						"type": "string"
					},
					"pFileName": {
						"type": "string"
					},
					"pADLSGen2URL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().pDirectoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().pContainer",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLSGen2_Xml')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGen2",
					"type": "LinkedServiceReference",
					"parameters": {
						"pADLSGen2URL": {
							"value": "@dataset().pADLSGen2URL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"pDirectory": {
						"type": "string",
						"defaultValue": "ClarityPPM/DETAILED_IP_REPORT/CostPlan/Current"
					},
					"pFileName": {
						"type": "string",
						"defaultValue": "*.xml"
					},
					"pADLSGen2URL": {
						"type": "string",
						"defaultValue": "https://mduse2avangridsa01.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().pDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().pContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_HTTP_Binary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"pBaseURL": {
							"value": "@dataset().pBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pBaseURL": {
						"type": "string"
					},
					"pRelativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().pRelativeURL",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_ADLSGen2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"pADLSGen2URL": {
						"type": "string",
						"defaultValue": "https://dlssyavgipsgadpdev.dfs.core.windows.net/"
					},
					"pKeyVaultBaseURL": {
						"type": "string",
						"defaultValue": "https://kv-avgipsgadp-dev.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLSGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AzureKeyVault",
							"type": "LinkedServiceReference",
							"parameters": {
								"pKeyVaultBaseURL": "https://kv-avgipsgadp-dev.vault.azure.net/"
							}
						},
						"secretName": "ADLSGen2AccountKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_AzureKeyVault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"pKeyVaultBaseURL": {
						"type": "string",
						"defaultValue": "https://kv-avgipsgadp-dev.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_HTTP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"pBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_CommonAllocation_ApprovedBudget')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Commonparquet"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Excel",
								"type": "DatasetReference"
							},
							"name": "CommonAllocationMaster"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "approvedbudgetUpdated"
						}
					],
					"transformations": [
						{
							"name": "SelectFinalCols"
						},
						{
							"name": "CostPlanJoinCommonAllocation"
						},
						{
							"name": "applyBudgetRatio"
						},
						{
							"name": "AddRowNumber"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TargetFilename as string,",
						"     Year as integer",
						"}",
						"source(output(",
						"          DepartmentBusinessUnit as string,",
						"          DepartmentArea as string,",
						"          DepartmentCostCenter as string,",
						"          Company as string,",
						"          Program as string,",
						"          SAPWBS as string,",
						"          ProjectName as string,",
						"          ProjectID as string,",
						"          ProjectManager as string,",
						"          ProjectChargeCode as string,",
						"          ControllingOrder as string,",
						"          ControllingOrderCIAC as long,",
						"          Rating as string,",
						"          Director as string,",
						"          Prioritization as string,",
						"          Stage as string,",
						"          Status as string,",
						"          RateCaseandCategoryOBSLevel2 as string,",
						"          RateCaseandCategoryOBSLevel3 as string,",
						"          RateCaseandCategoryOBSLevel4 as string,",
						"          CostPlanName as string,",
						"          CostPlanID as string,",
						"          PlanofRecord as integer,",
						"          CostPlanType as string,",
						"          CostType as string,",
						"          ChargeCode as string,",
						"          Resource as string,",
						"          PriorActualsBudget as float,",
						"          Jan as float,",
						"          Feb as float,",
						"          Mar as float,",
						"          Apr as float,",
						"          May as float,",
						"          Jun as float,",
						"          Jul as float,",
						"          Aug as float,",
						"          Sep as float,",
						"          Oct as float,",
						"          Nov as float,",
						"          Dec as float,",
						"          CurrentYear as string,",
						"          PlanUpdateDate as string,",
						"          {2024} as double,",
						"          {2025} as integer,",
						"          {2026} as string,",
						"          {2027} as string,",
						"          {2028} as string,",
						"          {2029} as string,",
						"          {2030} as string,",
						"          {2031} as string,",
						"          {2032} as string,",
						"          {2033} as string,",
						"          {2034} as string,",
						"          CostPlanSystemGeneratedId as long,",
						"          InsertDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          PlanYear as integer,",
						"          ProjectDefinition as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Commonparquet",
						"source(output(",
						"          ID as string,",
						"          Company as string,",
						"          {Project Charge Code} as string,",
						"          Year as integer,",
						"          CompanyShort as string,",
						"          ChargeCodeShort as string,",
						"          BudgetRatio as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CommonAllocationMaster",
						"applyBudgetRatio select(mapColumn(",
						"          DepartmentBusinessUnit,",
						"          DepartmentArea,",
						"          DepartmentCostCenter,",
						"          Company = Commonparquet@Company,",
						"          Program,",
						"          SAPWBS,",
						"          ProjectName,",
						"          ProjectID,",
						"          ProjectManager,",
						"          ProjectChargeCode,",
						"          ControllingOrder,",
						"          ControllingOrderCIAC,",
						"          Rating,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2,",
						"          RateCaseandCategoryOBSLevel3,",
						"          RateCaseandCategoryOBSLevel4,",
						"          CostPlanName,",
						"          CostPlanID,",
						"          PlanofRecord,",
						"          CostPlanType,",
						"          CostType,",
						"          ChargeCode,",
						"          Resource,",
						"          PriorActualsBudget,",
						"          PlanUpdateDate,",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          CostPlanSystemGeneratedId,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          PlanYear,",
						"          ProjectDefinition,",
						"          ChargeCodeAbbrv = ChargeCodeShort,",
						"          BudgetRatio,",
						"          each(match(between(toInteger(name),$Year,toInteger($Year)+10)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalCols",
						"Commonparquet, CommonAllocationMaster join(lower(trim(Commonparquet@Company)) == lower(trim(CommonAllocationMaster@Company))",
						"     && lower(trim(ProjectChargeCode)) == lower(trim({Project Charge Code}))",
						"     && PlanYear == Year,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CostPlanJoinCommonAllocation",
						"AddRowNumber derive(each(match(startsWith(name,\"20\")||in([\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],name)), $$ = iif(isNull(BudgetRatio) , toDouble($$), multiply(toDouble($$), toDouble(BudgetRatio)))),",
						"          CostPlanSystemGeneratedId = iif(isNull(CompanyShort), CostPlanSystemGeneratedId, CostPlanSystemGeneratedId + (rownumGenerated/10)),",
						"          ProjectChargeCode = iif(trim(ProjectChargeCode) == 'Common' && !isNull(ChargeCodeShort) \r",
						"    ,iif(ChargeCodeShort == 'E', 'Electric Generation'\r",
						"        ,iif(ChargeCodeShort == 'T', 'Electric Transmission' \r",
						"            ,iif(ChargeCodeShort == 'D', 'Electric Distribution'\r",
						"                ,iif(ChargeCodeShort == 'G', 'Gas'\r",
						"                , ProjectChargeCode\r",
						"                )\r",
						"            )\r",
						"        )\r",
						"    )\r",
						", ProjectChargeCode)) ~> applyBudgetRatio",
						"CostPlanJoinCommonAllocation window(over(CostPlanSystemGeneratedId),",
						"     asc(CostPlanSystemGeneratedId, true),",
						"     rownumGenerated = rowNumber()) ~> AddRowNumber",
						"SelectFinalCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:[($TargetFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> approvedbudgetUpdated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Excel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_CommonAllocation_CostPlan')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Commonparquet"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Excel",
								"type": "DatasetReference"
							},
							"name": "CommonAllocationMaster"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "CostPlanUpdated"
						}
					],
					"transformations": [
						{
							"name": "SelectFinalCols"
						},
						{
							"name": "CostPlanJoinCommonAllocation"
						},
						{
							"name": "applyBudgetRatio"
						},
						{
							"name": "AddRowNumber"
						}
					],
					"scriptLines": [
						"parameters{",
						"     CostPlan as string,",
						"     TargetFilename as string,",
						"     Year as integer",
						"}",
						"source(output(",
						"          DepartmentBusinessUnit as string,",
						"          DepartmentArea as string,",
						"          DepartmentCostCenter as string,",
						"          Company as string,",
						"          Program as string,",
						"          SAPWBS as string,",
						"          ProjectName as string,",
						"          ProjectID as string,",
						"          ProjectManager as string,",
						"          ProjectChargeCode as string,",
						"          ControllingOrder as string,",
						"          ControllingOrderCIAC as long,",
						"          Rating as string,",
						"          Director as string,",
						"          Prioritization as string,",
						"          Stage as string,",
						"          Status as string,",
						"          RateCaseandCategoryOBSLevel2 as string,",
						"          RateCaseandCategoryOBSLevel3 as string,",
						"          RateCaseandCategoryOBSLevel4 as string,",
						"          CostPlanName as string,",
						"          CostPlanID as string,",
						"          PlanofRecord as integer,",
						"          CostPlanType as string,",
						"          CostType as string,",
						"          ChargeCode as string,",
						"          Resource as string,",
						"          PriorActualsBudget as float,",
						"          Jan as float,",
						"          Feb as float,",
						"          Mar as float,",
						"          Apr as float,",
						"          May as float,",
						"          Jun as float,",
						"          Jul as float,",
						"          Aug as float,",
						"          Sep as float,",
						"          Oct as float,",
						"          Nov as float,",
						"          Dec as float,",
						"          CurrentYear as string,",
						"          {2024} as float,",
						"          {2025} as float,",
						"          {2026} as float,",
						"          {2027} as float,",
						"          {2028} as float,",
						"          {2029} as float,",
						"          {2030} as float,",
						"          {2031} as float,",
						"          {2032} as float,",
						"          {2023} as float,",
						"          CostPlanSystemGeneratedId as long,",
						"          InsertDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          PlanYear as integer,",
						"          ProjectDefinition as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Commonparquet",
						"source(output(",
						"          ID as string,",
						"          Company as string,",
						"          {Project Charge Code} as string,",
						"          Year as integer,",
						"          CompanyShort as string,",
						"          ChargeCodeShort as string,",
						"          BudgetRatio as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CommonAllocationMaster",
						"applyBudgetRatio select(mapColumn(",
						"          DepartmentBusinessUnit,",
						"          DepartmentArea,",
						"          DepartmentCostCenter,",
						"          Company = Commonparquet@Company,",
						"          Program,",
						"          SAPWBS,",
						"          ProjectName,",
						"          ProjectId = ProjectID,",
						"          ProjectManager,",
						"          ProjectChargeCode,",
						"          ProjectDefinition,",
						"          ControllingOrder,",
						"          ControllingOrderCIAC,",
						"          Rating,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2,",
						"          RateCaseandCategoryOBSLevel3,",
						"          RateCaseandCategoryOBSLevel4,",
						"          CostPlanName,",
						"          CostPlanID,",
						"          PlanofRecord,",
						"          CostPlanType,",
						"          CostType,",
						"          Resource,",
						"          ChargeCode,",
						"          PriorActualsBudget,",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          CostPlanSystemGeneratedId,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          PlanYear,",
						"          BudgetRatio,",
						"          ChargeCodeAbbrv = ChargeCodeShort,",
						"          each(match(between(toInteger(name),$Year,toInteger($Year)+10)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalCols",
						"Commonparquet, CommonAllocationMaster join(lower(trim(Commonparquet@Company)) == lower(trim(CommonAllocationMaster@Company))",
						"     && lower(trim(ProjectChargeCode)) == lower(trim({Project Charge Code}))",
						"     && PlanYear == Year,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CostPlanJoinCommonAllocation",
						"AddRowNumber derive(each(match(startsWith(name,\"20\")||in([\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],name)), $$ = iif(isNull(BudgetRatio) , toDouble($$), multiply(toDouble($$), toDouble(BudgetRatio)))),",
						"          CostPlanSystemGeneratedId = iif(isNull(CompanyShort), CostPlanSystemGeneratedId, CostPlanSystemGeneratedId + (rownumGenerated/10)),",
						"          ProjectChargeCode = iif(trim(ProjectChargeCode) == 'Common' && !isNull(ChargeCodeShort)     \r",
						"    ,iif(ChargeCodeShort == 'E', 'Electric Generation'        \r",
						"        ,iif(ChargeCodeShort == 'T', 'Electric Transmission'             \r",
						"            ,iif(ChargeCodeShort == 'D', 'Electric Distribution'                \r",
						"                ,iif(ChargeCodeShort == 'G', 'Gas'                \r",
						"                , ProjectChargeCode\r",
						"                )            \r",
						"            )        \r",
						"        )    \r",
						"    )\r",
						", ProjectChargeCode)) ~> applyBudgetRatio",
						"CostPlanJoinCommonAllocation window(over(CostPlanSystemGeneratedId),",
						"     asc(CostPlanSystemGeneratedId, true),",
						"     rownumGenerated = rowNumber()) ~> AddRowNumber",
						"SelectFinalCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:[($TargetFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CostPlanUpdated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Excel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_CommonAllocation_Historic')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Commonparquet"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Excel",
								"type": "DatasetReference"
							},
							"name": "CommonAllocationMaster"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "approvedbudgetUpdated"
						}
					],
					"transformations": [
						{
							"name": "SelectFinalCols"
						},
						{
							"name": "CostPlanJoinCommonAllocation"
						},
						{
							"name": "applyBudgetRatio"
						},
						{
							"name": "AddRowNumber"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TargetFilename as string,",
						"     Year as integer",
						"}",
						"source(output(",
						"          DepartmentBusinessUnit as string,",
						"          DepartmentArea as string,",
						"          DepartmentCostCenter as string,",
						"          Company as string,",
						"          Program as string,",
						"          SAPWBS as string,",
						"          ProjectDefinition as string,",
						"          ProjectName as string,",
						"          ProjectID as string,",
						"          ProjectManager as string,",
						"          ProjectChargeCode as string,",
						"          ControllingOrder as string,",
						"          ControllingOrderCIAC as string,",
						"          Rating as string,",
						"          Director as string,",
						"          Prioritization as string,",
						"          Stage as string,",
						"          Status as string,",
						"          RateCaseandCategoryOBSLevel2 as string,",
						"          RateCaseandCategoryOBSLevel3 as string,",
						"          RateCaseandCategoryOBSLevel4 as string,",
						"          CostPlanName as string,",
						"          CostPlanID as string,",
						"          PlanofRecord as string,",
						"          CostPlanType as string,",
						"          CostType as string,",
						"          ChargeCode as string,",
						"          Resource as string,",
						"          PriorActualsBudget as double,",
						"          Jan as double,",
						"          Feb as double,",
						"          Mar as double,",
						"          Apr as double,",
						"          May as double,",
						"          Jun as double,",
						"          Jul as double,",
						"          Aug as double,",
						"          Sep as double,",
						"          Oct as double,",
						"          Nov as double,",
						"          Dec as double,",
						"          PlanYear as integer,",
						"          InsertDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          CostPlanSystemGeneratedId as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Commonparquet",
						"source(output(",
						"          ID as string,",
						"          Company as string,",
						"          {Project Charge Code} as string,",
						"          Year as integer,",
						"          CompanyShort as string,",
						"          ChargeCodeShort as string,",
						"          BudgetRatio as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CommonAllocationMaster",
						"applyBudgetRatio select(mapColumn(",
						"          DepartmentBusinessUnit,",
						"          DepartmentArea,",
						"          DepartmentCostCenter,",
						"          Company = Commonparquet@Company,",
						"          Program,",
						"          SAPWBS,",
						"          ProjectName,",
						"          ProjectID,",
						"          ProjectManager,",
						"          ProjectChargeCode,",
						"          ControllingOrder,",
						"          ControllingOrderCIAC,",
						"          Rating,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2,",
						"          RateCaseandCategoryOBSLevel3,",
						"          RateCaseandCategoryOBSLevel4,",
						"          CostPlanName,",
						"          CostPlanID,",
						"          PlanofRecord,",
						"          CostPlanType,",
						"          CostType,",
						"          ChargeCode,",
						"          Resource,",
						"          PriorActualsBudget,",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          CostPlanSystemGeneratedId,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          PlanYear,",
						"          ProjectDefinition,",
						"          ChargeCodeAbbrv = ChargeCodeShort,",
						"          BudgetRatio,",
						"          each(match(between(toInteger(name),$Year,toInteger($Year)+10)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalCols",
						"Commonparquet, CommonAllocationMaster join(lower(trim(Commonparquet@Company)) == lower(trim(CommonAllocationMaster@Company))",
						"     && lower(trim(ProjectChargeCode)) == lower(trim({Project Charge Code}))",
						"     && PlanYear == Year,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CostPlanJoinCommonAllocation",
						"AddRowNumber derive(each(match(startsWith(name,\"20\")||in([\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],name)), $$ = iif(isNull(BudgetRatio) , toDouble($$), multiply(toDouble($$), toDouble(BudgetRatio)))),",
						"          CostPlanSystemGeneratedId = iif(isNull(CompanyShort), toFloat(CostPlanSystemGeneratedId), toFloat(CostPlanSystemGeneratedId + (rownumGenerated/10))),",
						"          ProjectChargeCode = iif(trim(ProjectChargeCode) == 'Common' && !isNull(ChargeCodeShort)     \r",
						"    ,iif(ChargeCodeShort == 'E', 'Electric Generation'        \r",
						"        ,iif(ChargeCodeShort == 'T', 'Electric Transmission' \r",
						"            ,iif(ChargeCodeShort == 'D', 'Electric Distribution'\r",
						"                    ,iif(ChargeCodeShort == 'G', 'Gas'\r",
						"                    , ProjectChargeCode\r",
						"                    )            \r",
						"            )        \r",
						"        )   \r",
						"    )\r",
						", ProjectChargeCode)) ~> applyBudgetRatio",
						"CostPlanJoinCommonAllocation window(over(CostPlanSystemGeneratedId),",
						"     asc(CostPlanSystemGeneratedId, true),",
						"     rownumGenerated = rowNumber()) ~> AddRowNumber",
						"SelectFinalCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:[($TargetFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> approvedbudgetUpdated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Excel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_ExcelToParquet_Historic')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Excel",
								"type": "DatasetReference"
							},
							"name": "ExcelSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "ParquetSink"
						}
					],
					"transformations": [
						{
							"name": "AddingSystemGeneratedSurrogateKey"
						},
						{
							"name": "AddingAuditColumns"
						},
						{
							"name": "RemovingSpaceColumnNames"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as integer,",
						"     targetFilename as string",
						"}",
						"source(output(",
						"          {Department (Business Unit)} as string,",
						"          {Department (Area)} as string,",
						"          {Department (Cost Center)} as string,",
						"          Company as string,",
						"          Program as string,",
						"          {SAP WBS} as string,",
						"          {Project Definition} as string,",
						"          {Project Name} as string,",
						"          {Project ID} as string,",
						"          {Project Manager} as string,",
						"          {Project Charge Code} as string,",
						"          {Controlling Order} as string,",
						"          {Controlling Order  CIAC} as string,",
						"          Rating as string,",
						"          Director as string,",
						"          Prioritization as string,",
						"          Stage as string,",
						"          Status as string,",
						"          {Rate Case and Category OBS Level - 2} as string,",
						"          {Rate Case and Category OBS Level - 3} as string,",
						"          {Rate Case and Category OBS Level - 4} as string,",
						"          {Cost Plan Name} as string,",
						"          {Cost Plan ID} as string,",
						"          {Plan of Record} as string,",
						"          {Cost Plan Type} as string,",
						"          {Cost Type} as string,",
						"          {Charge Code} as string,",
						"          Resource as string,",
						"          {Prior Actuals / Budget} as string,",
						"          Jan as float,",
						"          Feb as float,",
						"          Mar as float,",
						"          Apr as float,",
						"          May as float,",
						"          Jun as float,",
						"          Jul as float,",
						"          Aug as float,",
						"          Sep as float,",
						"          Oct as float,",
						"          Nov as float,",
						"          Dec as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'float',",
						"     booleanFormat: ['True', 'False']) ~> ExcelSource",
						"AddingAuditColumns keyGenerate(output(CostPlanSystemGeneratedId as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddingSystemGeneratedSurrogateKey",
						"RemovingSpaceColumnNames derive(PlanYear = $year,",
						"          InsertDate = currentTimestamp(),",
						"          UpdatedDate = currentTimestamp(),",
						"          each(match(startsWith(name,\"20\")||in([\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\",\"PriorActualsBudget\"],name)), $$ = toDouble($$))) ~> AddingAuditColumns",
						"ExcelSource select(mapColumn(",
						"          DepartmentBusinessUnit = {Department (Business Unit)},",
						"          DepartmentArea = {Department (Area)},",
						"          DepartmentCostCenter = {Department (Cost Center)},",
						"          Company,",
						"          Program,",
						"          SAPWBS = {SAP WBS},",
						"          ProjectDefinition = {Project Definition},",
						"          ProjectName = {Project Name},",
						"          ProjectID = {Project ID},",
						"          ProjectManager = {Project Manager},",
						"          ProjectChargeCode = {Project Charge Code},",
						"          ControllingOrder = {Controlling Order},",
						"          ControllingOrderCIAC = {Controlling Order  CIAC},",
						"          Rating,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2 = {Rate Case and Category OBS Level - 2},",
						"          RateCaseandCategoryOBSLevel3 = {Rate Case and Category OBS Level - 3},",
						"          RateCaseandCategoryOBSLevel4 = {Rate Case and Category OBS Level - 4},",
						"          CostPlanName = {Cost Plan Name},",
						"          CostPlanID = {Cost Plan ID},",
						"          PlanofRecord = {Plan of Record},",
						"          CostPlanType = {Cost Plan Type},",
						"          CostType = {Cost Type},",
						"          ChargeCode = {Charge Code},",
						"          Resource,",
						"          PriorActualsBudget = {Prior Actuals / Budget},",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          each(match(between(toInteger(name),$year,toInteger($year)+10)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemovingSpaceColumnNames",
						"AddingSystemGeneratedSurrogateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:[($targetFilename)],",
						"     umask: 0664,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> ParquetSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Excel')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_Info_Monthly_Yearly_parquet_ApprovedBudget')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Commonparquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Costplanparquet"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "sinkYearly"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "sinkMonthly"
						}
					],
					"transformations": [
						{
							"name": "RemoveDuplicate"
						},
						{
							"name": "DeriveTragetFilePath"
						},
						{
							"name": "unpivotMonthly"
						},
						{
							"name": "SelectMonthly"
						},
						{
							"name": "SelectYearly"
						},
						{
							"name": "unpivotYearly"
						},
						{
							"name": "selectCostPlanInfo"
						},
						{
							"name": "resetYearType"
						},
						{
							"name": "RenameBudgetAmount"
						},
						{
							"name": "selectFinalColumns"
						},
						{
							"name": "KeepSameTypes"
						},
						{
							"name": "selectFinalMonthlyCols"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ProducedDirectory as string ('Facts/Fact_ApprovedBudget'),",
						"     Year as integer",
						"}",
						"source(output(",
						"          DepartmentBusinessUnit as string,",
						"          DepartmentArea as string,",
						"          DepartmentCostCenter as string,",
						"          Company as string,",
						"          Program as string,",
						"          SAPWBS as string,",
						"          ProjectName as string,",
						"          ProjectID as string,",
						"          ProjectManager as string,",
						"          ProjectChargeCode as string,",
						"          ControllingOrder as string,",
						"          ControllingOrderCIAC as long,",
						"          Rating as string,",
						"          Director as string,",
						"          Prioritization as string,",
						"          Stage as string,",
						"          Status as string,",
						"          RateCaseandCategoryOBSLevel2 as string,",
						"          RateCaseandCategoryOBSLevel3 as string,",
						"          RateCaseandCategoryOBSLevel4 as string,",
						"          CostPlanName as string,",
						"          CostPlanID as string,",
						"          PlanofRecord as integer,",
						"          CostPlanType as string,",
						"          CostType as string,",
						"          ChargeCode as string,",
						"          Resource as string,",
						"          PriorActualsBudget as float,",
						"          PlanUpdateDate as string,",
						"          Jan as double,",
						"          Feb as double,",
						"          Mar as double,",
						"          Apr as double,",
						"          May as double,",
						"          Jun as double,",
						"          Jul as double,",
						"          Aug as double,",
						"          Sep as double,",
						"          Oct as double,",
						"          Nov as double,",
						"          Dec as double,",
						"          CostPlanSystemGeneratedId as float,",
						"          InsertDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          PlanYear as integer,",
						"          ProjectDefinition as string,",
						"          ChargeCodeAbbrv as string,",
						"          BudgetRatio as double,",
						"          {2024} as double,",
						"          {2025} as double,",
						"          {2026} as double,",
						"          {2027} as double,",
						"          {2028} as double,",
						"          {2029} as double,",
						"          {2030} as double,",
						"          {2031} as double,",
						"          {2032} as double,",
						"          {2033} as double,",
						"          {2034} as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Commonparquet",
						"Commonparquet select(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDuplicate",
						"KeepSameTypes derive(TargetFilePathCostPlanInfo = concat($ProducedDirectory,'/Info/ApprovedBudget.parquet'),",
						"          TargetFilePathCostPlanMonthly = concat($ProducedDirectory, '/Monthly/ApprovedBudget.parquet'),",
						"          TargetFilePathCostPlanYearly = concat($ProducedDirectory, '/Yearly/ApprovedBudget.parquet'),",
						"          InsertDate = currentTimestamp(),",
						"          UpdatedDate = currentTimestamp(),",
						"          SourceName = 'ApprovedBudget') ~> DeriveTragetFilePath",
						"SelectMonthly unpivot(output(",
						"          Month as string,",
						"          Value as double",
						"     ),",
						"     ungroupBy(CostPlanSystemGeneratedId,",
						"          TargetFilePathCostPlanMonthly,",
						"          BudgetYear,",
						"          SourceName),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpivotMonthly",
						"DeriveTragetFilePath select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          BudgetYear = PlanYear,",
						"          SourceName,",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          TargetFilePathCostPlanMonthly",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMonthly",
						"DeriveTragetFilePath select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          PlanYear,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          TargetFilePathCostPlanYearly,",
						"          SourceName,",
						"          each(match(between(toInteger(name),$Year,toInteger($Year)+10)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYearly",
						"SelectYearly unpivot(output(",
						"          upyear as string,",
						"          Value as double",
						"     ),",
						"     ungroupBy(CostPlanSystemGeneratedId,",
						"          TargetFilePathCostPlanYearly,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          PlanYear,",
						"          SourceName),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpivotYearly",
						"DeriveTragetFilePath select(mapColumn(",
						"          DepartmentBusinessUnit,",
						"          DepartmentArea,",
						"          DepartmentCostCenter,",
						"          Company,",
						"          Program,",
						"          SAPWBS,",
						"          ProjectName,",
						"          ProjectID,",
						"          ProjectManager,",
						"          ProjectChargeCode,",
						"          ControllingOrder,",
						"          ControllingOrderCIAC,",
						"          Rating,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2,",
						"          RateCaseandCategoryOBSLevel3,",
						"          RateCaseandCategoryOBSLevel4,",
						"          CostPlanName = SourceName,",
						"          CostPlanID,",
						"          PlanofRecord,",
						"          CostPlanType,",
						"          CostType,",
						"          ChargeCode,",
						"          Resource,",
						"          PriorActualsBudget,",
						"          CostPlanSystemGeneratedId,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          PlanYear,",
						"          ProjectDefinition,",
						"          PlanUpdateDate,",
						"          ChargeCodeAbbrv,",
						"          BudgetRatio,",
						"          TargetFilePathCostPlanInfo,",
						"          SourceName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCostPlanInfo",
						"unpivotYearly derive(Value = iif(isNull(Value), toDouble(0), toDouble(Value))) ~> resetYearType",
						"unpivotMonthly derive(BudgetAmount = iif(isNull(Value), toDouble(0), toDouble(Value))) ~> RenameBudgetAmount",
						"resetYearType select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          BudgetYear = upyear,",
						"          BudgetAmount = Value,",
						"          PlanYear,",
						"          TargetFilePathCostPlanYearly,",
						"          SourceName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinalColumns",
						"RemoveDuplicate cast(output(",
						"          PriorActualsBudget as double,",
						"          Jan as double,",
						"          Feb as double,",
						"          Mar as double,",
						"          Apr as double,",
						"          May as double,",
						"          Jun as double,",
						"          Jul as double,",
						"          Aug as double,",
						"          Sep as double,",
						"          Oct as double,",
						"          Nov as double,",
						"          Dec as double",
						"     ),",
						"     errors: false) ~> KeepSameTypes",
						"RenameBudgetAmount select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          TargetFilePathCostPlanMonthly,",
						"          BudgetYear,",
						"          SourceName,",
						"          BudgetMonth = Month,",
						"          BudgetAmount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinalMonthlyCols",
						"selectCostPlanInfo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetFilePathCostPlanInfo',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> Costplanparquet",
						"selectFinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetFilePathCostPlanYearly',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkYearly",
						"selectFinalMonthlyCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetFilePathCostPlanMonthly',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkMonthly"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_Info_Monthly_Yearly_parquet_CostPlan')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Commonparquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Costplanparquet"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "sinkYearly"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "sinkMonthly"
						}
					],
					"transformations": [
						{
							"name": "RemoveDuplicate"
						},
						{
							"name": "DeriveTragetFilePath"
						},
						{
							"name": "unpivotMonthly"
						},
						{
							"name": "SelectMonthly"
						},
						{
							"name": "SelectYearly"
						},
						{
							"name": "unpivotYearly"
						},
						{
							"name": "selectCostPlanInfo"
						},
						{
							"name": "resetYearType"
						},
						{
							"name": "RenameBudgetAmount"
						},
						{
							"name": "selectFinalColumns"
						},
						{
							"name": "KeepSameTypes"
						},
						{
							"name": "selectFinalMonthlyCols"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ProducedDirectory as string ('Facts/Fact_CostPlans'),",
						"     Year as integer",
						"}",
						"source(output(",
						"          DepartmentBusinessUnit as string,",
						"          DepartmentArea as string,",
						"          DepartmentCostCenter as string,",
						"          Company as string,",
						"          Program as string,",
						"          SAPWBS as string,",
						"          ProjectName as string,",
						"          ProjectId as string,",
						"          ProjectManager as string,",
						"          ProjectChargeCode as string,",
						"          ProjectDefinition as string,",
						"          ControllingOrder as string,",
						"          ControllingOrderCIAC as long,",
						"          Rating as string,",
						"          Director as string,",
						"          Prioritization as string,",
						"          Stage as string,",
						"          Status as string,",
						"          RateCaseandCategoryOBSLevel2 as string,",
						"          RateCaseandCategoryOBSLevel3 as string,",
						"          RateCaseandCategoryOBSLevel4 as string,",
						"          CostPlanName as string,",
						"          CostPlanID as string,",
						"          PlanofRecord as integer,",
						"          CostPlanType as string,",
						"          CostType as string,",
						"          Resource as string,",
						"          ChargeCode as string,",
						"          PriorActualsBudget as float,",
						"          Jan as double,",
						"          Feb as double,",
						"          Mar as double,",
						"          Apr as double,",
						"          May as double,",
						"          Jun as double,",
						"          Jul as double,",
						"          Aug as double,",
						"          Sep as double,",
						"          Oct as double,",
						"          Nov as double,",
						"          Dec as double,",
						"          CostPlanSystemGeneratedId as float,",
						"          InsertDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          PlanYear as integer,",
						"          BudgetRatio as double,",
						"          ChargeCodeAbbrv as string,",
						"          {2024} as double,",
						"          {2025} as double,",
						"          {2026} as double,",
						"          {2027} as double,",
						"          {2028} as double,",
						"          {2029} as double,",
						"          {2030} as double,",
						"          {2031} as double,",
						"          {2032} as double,",
						"          {2023} as double,",
						"          {2033} as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Commonparquet",
						"Commonparquet select(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDuplicate",
						"KeepSameTypes derive(TargetFilePathCostPlanInfo = concat($ProducedDirectory,'/Info/',CostPlanName,'.parquet'),",
						"          TargetFilePathCostPlanMonthly = concat($ProducedDirectory, '/Monthly/',CostPlanName,'.parquet'),",
						"          TargetFilePathCostPlanYearly = concat($ProducedDirectory, '/Yearly/',CostPlanName,'.parquet'),",
						"          InsertDate = currentTimestamp(),",
						"          UpdatedDate = currentTimestamp()) ~> DeriveTragetFilePath",
						"SelectMonthly unpivot(output(",
						"          Month as string,",
						"          Value as double",
						"     ),",
						"     ungroupBy(CostPlanSystemGeneratedId,",
						"          TargetFilePathCostPlanMonthly,",
						"          BudgetYear,",
						"          CostPlanName),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpivotMonthly",
						"DeriveTragetFilePath select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          BudgetYear = PlanYear,",
						"          CostPlanName,",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          TargetFilePathCostPlanMonthly",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMonthly",
						"DeriveTragetFilePath select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          CostPlanName,",
						"          PlanYear,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          TargetFilePathCostPlanYearly,",
						"          each(match(between(toInteger(name),$Year,toInteger($Year)+10)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYearly",
						"SelectYearly unpivot(output(",
						"          upyear as string,",
						"          Value as double",
						"     ),",
						"     ungroupBy(CostPlanSystemGeneratedId,",
						"          TargetFilePathCostPlanYearly,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          PlanYear,",
						"          CostPlanName),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpivotYearly",
						"DeriveTragetFilePath select(mapColumn(",
						"          DepartmentBusinessUnit,",
						"          DepartmentArea,",
						"          DepartmentCostCenter,",
						"          Company,",
						"          Program,",
						"          SAPWBS,",
						"          ProjectName,",
						"          ProjectId,",
						"          ProjectManager,",
						"          ProjectChargeCode,",
						"          ProjectDefinition,",
						"          ControllingOrder,",
						"          ControllingOrderCIAC,",
						"          Rating,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2,",
						"          RateCaseandCategoryOBSLevel3,",
						"          RateCaseandCategoryOBSLevel4,",
						"          CostPlanName,",
						"          CostPlanID,",
						"          PlanofRecord,",
						"          CostPlanType,",
						"          CostType,",
						"          Resource,",
						"          ChargeCode,",
						"          PriorActualsBudget,",
						"          CostPlanSystemGeneratedId,",
						"          InsertDate,",
						"          UpdatedDate,",
						"          PlanYear,",
						"          BudgetRatio,",
						"          ChargeCodeAbbrv,",
						"          TargetFilePathCostPlanInfo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCostPlanInfo",
						"unpivotYearly derive(Value = iif(isNull(Value), toDouble(0), toDouble(Value))) ~> resetYearType",
						"unpivotMonthly derive(BudgetAmount = iif(isNull(Value), toDouble(0), toDouble(Value))) ~> RenameBudgetAmount",
						"resetYearType select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          BudgetYear = upyear,",
						"          BudgetAmount = Value,",
						"          PlanYear,",
						"          TargetFilePathCostPlanYearly,",
						"          CostPlanName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinalColumns",
						"RemoveDuplicate cast(output(",
						"          ControllingOrderCIAC as string,",
						"          PlanofRecord as string,",
						"          PriorActualsBudget as double,",
						"          Jan as double,",
						"          Feb as double,",
						"          Mar as double,",
						"          Apr as double,",
						"          May as double,",
						"          Jun as double,",
						"          Jul as double,",
						"          Aug as double,",
						"          Sep as double,",
						"          Oct as double,",
						"          Nov as double,",
						"          Dec as double",
						"     ),",
						"     errors: false) ~> KeepSameTypes",
						"RenameBudgetAmount select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          TargetFilePathCostPlanMonthly,",
						"          BudgetYear,",
						"          CostPlanName,",
						"          BudgetMonth = Month,",
						"          BudgetAmount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinalMonthlyCols",
						"selectCostPlanInfo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetFilePathCostPlanInfo',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> Costplanparquet",
						"selectFinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetFilePathCostPlanYearly',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkYearly",
						"selectFinalMonthlyCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetFilePathCostPlanMonthly',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkMonthly"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_ParquetYearlyMonthyInfo_Historic')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "ParquetSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "CostPlanInfoSink"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "MonthlySink"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "YearlySink"
						}
					],
					"transformations": [
						{
							"name": "CostPlanInfo"
						},
						{
							"name": "SelectMonthly"
						},
						{
							"name": "Yearly"
						},
						{
							"name": "YearlyUnpivot"
						},
						{
							"name": "MonthlyUnpivot"
						},
						{
							"name": "AddingTargetDirectoryyearly"
						},
						{
							"name": "AddingtargetDirectoryMonthly"
						},
						{
							"name": "AddingTargetDirectoryInfo"
						},
						{
							"name": "SelectYearly"
						}
					],
					"scriptLines": [
						"parameters{",
						"     tagertYearlyDirectory as string,",
						"     targetMonthlyDirectory as string,",
						"     targetInfoDirectroy as string,",
						"     year as integer,",
						"     sourceFilename as string",
						"}",
						"source(output(",
						"          DepartmentBusinessUnit as string,",
						"          DepartmentArea as string,",
						"          DepartmentCostCenter as string,",
						"          Company as string,",
						"          Program as string,",
						"          SAPWBS as string,",
						"          ProjectName as string,",
						"          ProjectID as string,",
						"          ProjectManager as string,",
						"          ProjectChargeCode as string,",
						"          ControllingOrder as string,",
						"          ControllingOrderCIAC as string,",
						"          Rating as string,",
						"          Director as string,",
						"          Prioritization as string,",
						"          Stage as string,",
						"          Status as string,",
						"          RateCaseandCategoryOBSLevel2 as string,",
						"          RateCaseandCategoryOBSLevel3 as string,",
						"          RateCaseandCategoryOBSLevel4 as string,",
						"          CostPlanName as string,",
						"          CostPlanID as string,",
						"          PlanofRecord as string,",
						"          CostPlanType as string,",
						"          CostType as string,",
						"          ChargeCode as string,",
						"          Resource as string,",
						"          PriorActualsBudget as double,",
						"          Jan as double,",
						"          Feb as double,",
						"          Mar as double,",
						"          Apr as double,",
						"          May as double,",
						"          Jun as double,",
						"          Jul as double,",
						"          Aug as double,",
						"          Sep as double,",
						"          Oct as double,",
						"          Nov as double,",
						"          Dec as double,",
						"          CostPlanSystemGeneratedId as float,",
						"          InsertDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          PlanYear as integer,",
						"          ProjectDefinition as string,",
						"          ChargeCodeAbbrv as string,",
						"          BudgetRatio as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'float',",
						"     booleanFormat: ['True', 'False']) ~> ParquetSource",
						"ParquetSource select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          DepartmentBusinessUnit,",
						"          DepartmentArea,",
						"          DepartmentCostCenter,",
						"          Company,",
						"          Program,",
						"          SAPWBS,",
						"          ProjectDefinition,",
						"          ProjectName,",
						"          ProjectID,",
						"          ProjectManager,",
						"          ProjectChargeCode,",
						"          ControllingOrder,",
						"          ControllingOrderCIAC,",
						"          Rating,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2,",
						"          RateCaseandCategoryOBSLevel3,",
						"          RateCaseandCategoryOBSLevel4,",
						"          CostPlanName,",
						"          CostPlanID,",
						"          PlanofRecord,",
						"          CostPlanType,",
						"          CostType,",
						"          ChargeCode,",
						"          Resource,",
						"          PriorActualsBudget,",
						"          PlanYear,",
						"          ChargeCodeAbbrv,",
						"          BudgetRatio,",
						"          InsertDate,",
						"          UpdateDate = UpdatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CostPlanInfo",
						"ParquetSource select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          BudgetYear = PlanYear,",
						"          CostPlanName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMonthly",
						"YearlyUnpivot select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          CostPlanName,",
						"          PlanYear,",
						"          BudgetYear,",
						"          BudgetAmount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Yearly",
						"SelectYearly unpivot(output(",
						"          BudgetYear as string,",
						"          BudgetAmount as double",
						"     ),",
						"     ungroupBy(CostPlanName,",
						"          CostPlanSystemGeneratedId,",
						"          PlanYear),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> YearlyUnpivot",
						"SelectMonthly unpivot(output(",
						"          BudgetMonth as string,",
						"          BudgetAmount as double",
						"     ),",
						"     ungroupBy(CostPlanSystemGeneratedId,",
						"          BudgetYear,",
						"          CostPlanName),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> MonthlyUnpivot",
						"Yearly derive(TargetDirectory = concat($tagertYearlyDirectory, '/', iif(locate('capex_actuals', lower($sourceFilename)) == 0, '', concat(toString($year), ' ')),CostPlanName,'.parquet')) ~> AddingTargetDirectoryyearly",
						"MonthlyUnpivot derive(TargetDirectory = concat($targetMonthlyDirectory, '/', iif(locate('capex_actuals', lower($sourceFilename)) == 0, '', concat(toString($year), ' ')), CostPlanName,'.parquet')) ~> AddingtargetDirectoryMonthly",
						"CostPlanInfo derive(TargetDirectory = concat($targetInfoDirectroy, '/', iif(locate('capex_actuals', lower($sourceFilename)) == 0, '', concat(toString($year), ' ')), CostPlanName, '.parquet')) ~> AddingTargetDirectoryInfo",
						"ParquetSource select(mapColumn(",
						"          CostPlanSystemGeneratedId,",
						"          PlanYear,",
						"          CostPlanName,",
						"          each(match(between(toInteger(name),$year,toInteger($year)+10)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectYearly",
						"AddingTargetDirectoryInfo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetDirectory',",
						"     umask: 0664,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> CostPlanInfoSink",
						"AddingtargetDirectoryMonthly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetDirectory',",
						"     umask: 0664,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3) ~> MonthlySink",
						"AddingTargetDirectoryyearly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'TargetDirectory',",
						"     umask: 0664,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2) ~> YearlySink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_Xml_Parquet_ApprovedBudget')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Xml",
								"type": "DatasetReference"
							},
							"name": "CostPlanXML"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Costplanparquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenXml"
						},
						{
							"name": "RemoveDuplicate"
						},
						{
							"name": "AddingCustomKey"
						},
						{
							"name": "AddingAuditColumns"
						},
						{
							"name": "CastDataTypes"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SourceDirectoryWildcard as string ('ClarityPPM/DETAILED_IP_REPORT/ApprovedBudget/Current/DETAILED_IP_REPORT_*.xml'),",
						"     TargetFilename as string ('Fact_ApprovedBudget'),",
						"     Year as integer",
						"}",
						"source(output(",
						"          {http://schemas.xmlsoap.org/soap/envelope/,Envelope} as ({http://schemas.xmlsoap.org/soap/envelope/,Body} as ({http://www.niku.com/xog,SessionID} as string, {http://www.niku.com/xog/Query,QueryResult} as ({http://www.niku.com/xog/Query,Code} as string, {http://www.niku.com/xog/Query,Records} as ({http://www.niku.com/xog/Query,Record} as ({http://www.niku.com/xog/Query,actual_cost} as float, {http://www.niku.com/xog/Query,chrg_code} as string, {http://www.niku.com/xog/Query,cmp_name} as string, {http://www.niku.com/xog/Query,control_order} as string, {http://www.niku.com/xog/Query,control_order_ciac} as long, {http://www.niku.com/xog/Query,cost01} as float, {http://www.niku.com/xog/Query,cost02} as float, {http://www.niku.com/xog/Query,cost03} as float, {http://www.niku.com/xog/Query,cost04} as float, {http://www.niku.com/xog/Query,cost05} as float, {http://www.niku.com/xog/Query,cost06} as float, {http://www.niku.com/xog/Query,cost07} as float, {http://www.niku.com/xog/Query,cost08} as float, {http://www.niku.com/xog/Query,cost09} as float, {http://www.niku.com/xog/Query,cost10} as float, {http://www.niku.com/xog/Query,cost11} as float, {http://www.niku.com/xog/Query,cost12} as float, {http://www.niku.com/xog/Query,cost13} as float, {http://www.niku.com/xog/Query,cost14} as float, {http://www.niku.com/xog/Query,cost15} as float, {http://www.niku.com/xog/Query,cost16} as float, {http://www.niku.com/xog/Query,cost17} as float, {http://www.niku.com/xog/Query,cost18} as float, {http://www.niku.com/xog/Query,cost19} as float, {http://www.niku.com/xog/Query,cost20} as float, {http://www.niku.com/xog/Query,cost21} as float, {http://www.niku.com/xog/Query,cost22} as float, {http://www.niku.com/xog/Query,cost23} as float, {http://www.niku.com/xog/Query,cp_type} as string, {http://www.niku.com/xog/Query,cst_type} as string, {http://www.niku.com/xog/Query,dept_l3_name} as string, {http://www.niku.com/xog/Query,dept_l4_name} as string, {http://www.niku.com/xog/Query,dept_l5_name} as string, {http://www.niku.com/xog/Query,dir_name} as string, {http://www.niku.com/xog/Query,dtl_id} as integer, {http://www.niku.com/xog/Query,is_capital} as integer, {http://www.niku.com/xog/Query,is_plan_of_record} as integer, {http://www.niku.com/xog/Query,legacy_wbs} as string, {http://www.niku.com/xog/Query,mgr_name} as string, {http://www.niku.com/xog/Query,period01} as string, {http://www.niku.com/xog/Query,period02} as string, {http://www.niku.com/xog/Query,period03} as string, {http://www.niku.com/xog/Query,period04} as string, {http://www.niku.com/xog/Query,period05} as string, {http://www.niku.com/xog/Query,period06} as string, {http://www.niku.com/xog/Query,period07} as string, {http://www.niku.com/xog/Query,period08} as string, {http://www.niku.com/xog/Query,period09} as string, {http://www.niku.com/xog/Query,period10} as string, {http://www.niku.com/xog/Query,period11} as string, {http://www.niku.com/xog/Query,period12} as string, {http://www.niku.com/xog/Query,period13} as string, {http://www.niku.com/xog/Query,period14} as string, {http://www.niku.com/xog/Query,period15} as string, {http://www.niku.com/xog/Query,period16} as string, {http://www.niku.com/xog/Query,period17} as string, {http://www.niku.com/xog/Query,period18} as string, {http://www.niku.com/xog/Query,period19} as string, {http://www.niku.com/xog/Query,period20} as string, {http://www.niku.com/xog/Query,period21} as string, {http://www.niku.com/xog/Query,period22} as string, {http://www.niku.com/xog/Query,period23} as string, {http://www.niku.com/xog/Query,plan_id} as string, {http://www.niku.com/xog/Query,plan_name} as string, {http://www.niku.com/xog/Query,plan_type_code} as string, {http://www.niku.com/xog/Query,plan_upd_dt} as string, {http://www.niku.com/xog/Query,prior_amount} as float, {http://www.niku.com/xog/Query,prior_budget} as float, {http://www.niku.com/xog/Query,prj_active} as integer, {http://www.niku.com/xog/Query,prj_chrg_code} as string, {http://www.niku.com/xog/Query,prj_code} as string, {http://www.niku.com/xog/Query,prj_desc} as string, {http://www.niku.com/xog/Query,prj_digitalization} as string, {http://www.niku.com/xog/Query,prj_id} as integer, {http://www.niku.com/xog/Query,prj_name} as string, {http://www.niku.com/xog/Query,prj_prioritization} as string, {http://www.niku.com/xog/Query,prj_stage} as string, {http://www.niku.com/xog/Query,prj_status} as string, {http://www.niku.com/xog/Query,programs} as string, {http://www.niku.com/xog/Query,rc_l2_name} as string, {http://www.niku.com/xog/Query,rc_l3_name} as string, {http://www.niku.com/xog/Query,rc_l4_name} as string, {http://www.niku.com/xog/Query,res_name} as string, {http://www.niku.com/xog/Query,rownum} as integer, {http://www.niku.com/xog/Query,sap_wbs} as string, {http://www.niku.com/xog/Query,unique_key} as string)[], {http://www.niku.com/xog/Query,_value_} as string), {http://www.niku.com/xog/Query,Slice} as ({http://www.niku.com/xog/Query,Number} as integer, {http://www.niku.com/xog/Query,Size} as integer, {http://www.niku.com/xog/Query,Total} as integer))), {http://schemas.xmlsoap.org/soap/envelope/,Header} as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true,",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'float',",
						"     booleanFormat: ['True', 'False'],",
						"     wildcardPaths:[($SourceDirectoryWildcard)]) ~> CostPlanXML",
						"CostPlanXML foldDown(unroll({http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}),",
						"     mapColumn(",
						"          RowNumber = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,rownum},",
						"          DepartmentBusinessUnit = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,dept_l3_name},",
						"          DepartmentArea = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,dept_l4_name},",
						"          DepartmentCostCenter = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,dept_l5_name},",
						"          Company = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cmp_name},",
						"          Program = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,programs},",
						"          SAPWBS = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,sap_wbs},",
						"          ProjectName = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_name},",
						"          ProjectId = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_code},",
						"          ProjectManager = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,mgr_name},",
						"          ProjectChargeCode = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_chrg_code},",
						"          ControllingOrder = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,control_order},",
						"          ControllingOrderCIAC = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,control_order_ciac},",
						"          Digitalization = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_digitalization},",
						"          Director = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,dir_name},",
						"          Prioritization = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_prioritization},",
						"          Stage = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_stage},",
						"          Status = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_status},",
						"          RateCaseandCategoryOBSLevel2 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,rc_l2_name},",
						"          RateCaseandCategoryOBSLevel3 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,rc_l3_name},",
						"          RateCaseandCategoryOBSLevel4 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,rc_l4_name},",
						"          CostPlanName = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,plan_name},",
						"          CostPlanID = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,plan_id},",
						"          PlanofRecord = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,is_plan_of_record},",
						"          CostPlanType = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cp_type},",
						"          CostType = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cst_type},",
						"          Resource = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,res_name},",
						"          ChargeCode = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,chrg_code},",
						"          PriorActualsBudget = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prior_amount},",
						"          PlanUpdateDate = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,plan_upd_dt},",
						"          Jan = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost01},",
						"          Feb = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost02},",
						"          Mar = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost03},",
						"          Apr = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost04},",
						"          May = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost05},",
						"          Jun = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost06},",
						"          Jul = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost07},",
						"          Aug = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost08},",
						"          Sep = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost09},",
						"          Oct = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost10},",
						"          Nov = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost11},",
						"          Dec = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost12},",
						"          AutoGeneratedYear_0 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost13},",
						"          AutoGeneratedYear_1 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost14},",
						"          AutoGeneratedYear_2 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost15},",
						"          AutoGeneratedYear_3 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost16},",
						"          AutoGeneratedYear_4 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost17},",
						"          AutoGeneratedYear_5 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost18},",
						"          AutoGeneratedYear_6 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost19},",
						"          AutoGeneratedYear_7 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost20},",
						"          AutoGeneratedYear_8 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost21},",
						"          AutoGeneratedYear_9 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost22},",
						"          AutoGeneratedYear_10 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost23},",
						"          CurrentYear = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,period13}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenXml",
						"CastDataTypes select(mapColumn(",
						"          DepartmentBusinessUnit,",
						"          DepartmentArea,",
						"          DepartmentCostCenter,",
						"          Company,",
						"          Program,",
						"          SAPWBS,",
						"          ProjectName,",
						"          ProjectID = ProjectId,",
						"          ProjectManager,",
						"          ProjectChargeCode,",
						"          ControllingOrder,",
						"          ControllingOrderCIAC,",
						"          Rating = Digitalization,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2,",
						"          RateCaseandCategoryOBSLevel3,",
						"          RateCaseandCategoryOBSLevel4,",
						"          CostPlanName,",
						"          CostPlanID,",
						"          PlanofRecord,",
						"          CostPlanType,",
						"          CostType,",
						"          ChargeCode,",
						"          Resource,",
						"          PriorActualsBudget,",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          CurrentYear,",
						"          PlanUpdateDate,",
						"          each(match(startsWith(name,\"AutoGeneratedYear\")),",
						"               toString($Year+toInteger(split($$,'_')[2])) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDuplicate",
						"RemoveDuplicate keyGenerate(output(CostPlanSystemGeneratedId as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddingCustomKey",
						"AddingCustomKey derive(InsertDate = currentTimestamp(),",
						"          UpdatedDate = currentTimestamp(),",
						"          PlanYear = year(toDate(CurrentYear)),",
						"          ProjectDefinition = \"\") ~> AddingAuditColumns",
						"FlattenXml cast(output(",
						"          AutoGeneratedYear_0 as double,",
						"          AutoGeneratedYear_1 as integer,",
						"          AutoGeneratedYear_2 as string,",
						"          AutoGeneratedYear_3 as string,",
						"          AutoGeneratedYear_4 as string,",
						"          AutoGeneratedYear_5 as string,",
						"          AutoGeneratedYear_6 as string,",
						"          AutoGeneratedYear_7 as string,",
						"          AutoGeneratedYear_8 as string,",
						"          AutoGeneratedYear_9 as string,",
						"          AutoGeneratedYear_10 as string",
						"     ),",
						"     errors: true) ~> CastDataTypes",
						"AddingAuditColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:[($TargetFilename)],",
						"     umask: 0664,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     partitionBy('hash', 1)) ~> Costplanparquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Xml')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF_Xml_Parquet_CostPlan')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Xml",
								"type": "DatasetReference"
							},
							"name": "CostPlanXML"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSGen2_Parquet",
								"type": "DatasetReference"
							},
							"name": "Costplanparquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenXml"
						},
						{
							"name": "RemoveDuplicate"
						},
						{
							"name": "AddingCustomKey"
						},
						{
							"name": "AddingAuditColumns"
						},
						{
							"name": "CastDataTypes"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SourceDirectoryWildcard as string ('ClarityPPM/DETAILED_IP_REPORT/CostPlan/Current/DETAILED_IP_REPORT_*.xml'),",
						"     TargetFilename as string ('2023 FC 9+3.parquet'),",
						"     Year as integer (2023)",
						"}",
						"source(output(",
						"          {http://schemas.xmlsoap.org/soap/envelope/,Envelope} as ({http://schemas.xmlsoap.org/soap/envelope/,Body} as ({http://www.niku.com/xog,SessionID} as string, {http://www.niku.com/xog/Query,QueryResult} as ({http://www.niku.com/xog/Query,Code} as string, {http://www.niku.com/xog/Query,Records} as ({http://www.niku.com/xog/Query,Record} as ({http://www.niku.com/xog/Query,actual_cost} as float, {http://www.niku.com/xog/Query,chrg_code} as string, {http://www.niku.com/xog/Query,cmp_name} as string, {http://www.niku.com/xog/Query,control_order} as string, {http://www.niku.com/xog/Query,control_order_ciac} as long, {http://www.niku.com/xog/Query,cost01} as float, {http://www.niku.com/xog/Query,cost02} as float, {http://www.niku.com/xog/Query,cost03} as float, {http://www.niku.com/xog/Query,cost04} as float, {http://www.niku.com/xog/Query,cost05} as float, {http://www.niku.com/xog/Query,cost06} as float, {http://www.niku.com/xog/Query,cost07} as float, {http://www.niku.com/xog/Query,cost08} as float, {http://www.niku.com/xog/Query,cost09} as float, {http://www.niku.com/xog/Query,cost10} as float, {http://www.niku.com/xog/Query,cost11} as float, {http://www.niku.com/xog/Query,cost12} as float, {http://www.niku.com/xog/Query,cost13} as float, {http://www.niku.com/xog/Query,cost14} as float, {http://www.niku.com/xog/Query,cost15} as float, {http://www.niku.com/xog/Query,cost16} as float, {http://www.niku.com/xog/Query,cost17} as float, {http://www.niku.com/xog/Query,cost18} as float, {http://www.niku.com/xog/Query,cost19} as float, {http://www.niku.com/xog/Query,cost20} as float, {http://www.niku.com/xog/Query,cost21} as float, {http://www.niku.com/xog/Query,cost22} as float, {http://www.niku.com/xog/Query,cost23} as float, {http://www.niku.com/xog/Query,cp_type} as string, {http://www.niku.com/xog/Query,cst_type} as string, {http://www.niku.com/xog/Query,dept_l3_name} as string, {http://www.niku.com/xog/Query,dept_l4_name} as string, {http://www.niku.com/xog/Query,dept_l5_name} as string, {http://www.niku.com/xog/Query,dir_name} as string, {http://www.niku.com/xog/Query,dtl_id} as integer, {http://www.niku.com/xog/Query,is_capital} as integer, {http://www.niku.com/xog/Query,is_plan_of_record} as integer, {http://www.niku.com/xog/Query,legacy_wbs} as string, {http://www.niku.com/xog/Query,mgr_name} as string, {http://www.niku.com/xog/Query,period01} as string, {http://www.niku.com/xog/Query,period02} as string, {http://www.niku.com/xog/Query,period03} as string, {http://www.niku.com/xog/Query,period04} as string, {http://www.niku.com/xog/Query,period05} as string, {http://www.niku.com/xog/Query,period06} as string, {http://www.niku.com/xog/Query,period07} as string, {http://www.niku.com/xog/Query,period08} as string, {http://www.niku.com/xog/Query,period09} as string, {http://www.niku.com/xog/Query,period10} as string, {http://www.niku.com/xog/Query,period11} as string, {http://www.niku.com/xog/Query,period12} as string, {http://www.niku.com/xog/Query,period13} as string, {http://www.niku.com/xog/Query,period14} as string, {http://www.niku.com/xog/Query,period15} as string, {http://www.niku.com/xog/Query,period16} as string, {http://www.niku.com/xog/Query,period17} as string, {http://www.niku.com/xog/Query,period18} as string, {http://www.niku.com/xog/Query,period19} as string, {http://www.niku.com/xog/Query,period20} as string, {http://www.niku.com/xog/Query,period21} as string, {http://www.niku.com/xog/Query,period22} as string, {http://www.niku.com/xog/Query,period23} as string, {http://www.niku.com/xog/Query,plan_id} as string, {http://www.niku.com/xog/Query,plan_name} as string, {http://www.niku.com/xog/Query,plan_type_code} as string, {http://www.niku.com/xog/Query,plan_upd_dt} as string, {http://www.niku.com/xog/Query,prior_amount} as float, {http://www.niku.com/xog/Query,prior_budget} as float, {http://www.niku.com/xog/Query,prj_active} as integer, {http://www.niku.com/xog/Query,prj_chrg_code} as string, {http://www.niku.com/xog/Query,prj_code} as string, {http://www.niku.com/xog/Query,prj_desc} as string, {http://www.niku.com/xog/Query,prj_digitalization} as string, {http://www.niku.com/xog/Query,prj_id} as integer, {http://www.niku.com/xog/Query,prj_name} as string, {http://www.niku.com/xog/Query,prj_prioritization} as string, {http://www.niku.com/xog/Query,prj_stage} as string, {http://www.niku.com/xog/Query,prj_status} as string, {http://www.niku.com/xog/Query,programs} as string, {http://www.niku.com/xog/Query,rc_l2_name} as string, {http://www.niku.com/xog/Query,rc_l3_name} as string, {http://www.niku.com/xog/Query,rc_l4_name} as string, {http://www.niku.com/xog/Query,res_name} as string, {http://www.niku.com/xog/Query,rownum} as integer, {http://www.niku.com/xog/Query,sap_wbs} as string, {http://www.niku.com/xog/Query,unique_key} as string)[], {http://www.niku.com/xog/Query,_value_} as string), {http://www.niku.com/xog/Query,Slice} as ({http://www.niku.com/xog/Query,Number} as integer, {http://www.niku.com/xog/Query,Size} as integer, {http://www.niku.com/xog/Query,Total} as integer))), {http://schemas.xmlsoap.org/soap/envelope/,Header} as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true,",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'float',",
						"     booleanFormat: ['True', 'False'],",
						"     wildcardPaths:[($SourceDirectoryWildcard)]) ~> CostPlanXML",
						"CostPlanXML foldDown(unroll({http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}),",
						"     mapColumn(",
						"          RowNumber = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,rownum},",
						"          DepartmentBusinessUnit = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,dept_l3_name},",
						"          DepartmentArea = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,dept_l4_name},",
						"          DepartmentCostCenter = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,dept_l5_name},",
						"          Company = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cmp_name},",
						"          Program = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,programs},",
						"          SAPWBS = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,sap_wbs},",
						"          ProjectName = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_name},",
						"          ProjectId = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_code},",
						"          ProjectManager = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,mgr_name},",
						"          ProjectChargeCode = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_chrg_code},",
						"          ControllingOrder = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,control_order},",
						"          ControllingOrderCIAC = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,control_order_ciac},",
						"          Digitalization = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_digitalization},",
						"          Director = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,dir_name},",
						"          Prioritization = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_prioritization},",
						"          Stage = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_stage},",
						"          Status = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prj_status},",
						"          RateCaseandCategoryOBSLevel2 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,rc_l2_name},",
						"          RateCaseandCategoryOBSLevel3 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,rc_l3_name},",
						"          RateCaseandCategoryOBSLevel4 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,rc_l4_name},",
						"          CostPlanName = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,plan_name},",
						"          CostPlanID = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,plan_id},",
						"          PlanofRecord = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,is_plan_of_record},",
						"          CostPlanType = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cp_type},",
						"          CostType = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cst_type},",
						"          Resource = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,res_name},",
						"          ChargeCode = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,chrg_code},",
						"          PriorActualsBudget = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,prior_amount},",
						"          Jan = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost01},",
						"          Feb = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost02},",
						"          Mar = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost03},",
						"          Apr = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost04},",
						"          May = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost05},",
						"          Jun = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost06},",
						"          Jul = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost07},",
						"          Aug = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost08},",
						"          Sep = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost09},",
						"          Oct = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost10},",
						"          Nov = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost11},",
						"          Dec = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost12},",
						"          AutoGeneratedYear_0 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost13},",
						"          AutoGeneratedYear_1 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost14},",
						"          AutoGeneratedYear_2 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost15},",
						"          AutoGeneratedYear_3 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost16},",
						"          AutoGeneratedYear_4 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost17},",
						"          AutoGeneratedYear_5 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost18},",
						"          AutoGeneratedYear_6 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost19},",
						"          AutoGeneratedYear_7 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost20},",
						"          AutoGeneratedYear_8 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost21},",
						"          AutoGeneratedYear_9 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost22},",
						"          AutoGeneratedYear_10 = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,cost23},",
						"          CurrentYear = {http://schemas.xmlsoap.org/soap/envelope/,Envelope}.{http://schemas.xmlsoap.org/soap/envelope/,Body}.{http://www.niku.com/xog/Query,QueryResult}.{http://www.niku.com/xog/Query,Records}.{http://www.niku.com/xog/Query,Record}.{http://www.niku.com/xog/Query,period13}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenXml",
						"CastDataTypes select(mapColumn(",
						"          DepartmentBusinessUnit,",
						"          DepartmentArea,",
						"          DepartmentCostCenter,",
						"          Company,",
						"          Program,",
						"          SAPWBS,",
						"          ProjectName,",
						"          ProjectID = ProjectId,",
						"          ProjectManager,",
						"          ProjectChargeCode,",
						"          ControllingOrder,",
						"          ControllingOrderCIAC,",
						"          Rating = Digitalization,",
						"          Director,",
						"          Prioritization,",
						"          Stage,",
						"          Status,",
						"          RateCaseandCategoryOBSLevel2,",
						"          RateCaseandCategoryOBSLevel3,",
						"          RateCaseandCategoryOBSLevel4,",
						"          CostPlanName,",
						"          CostPlanID,",
						"          PlanofRecord,",
						"          CostPlanType,",
						"          CostType,",
						"          ChargeCode,",
						"          Resource,",
						"          PriorActualsBudget,",
						"          Jan,",
						"          Feb,",
						"          Mar,",
						"          Apr,",
						"          May,",
						"          Jun,",
						"          Jul,",
						"          Aug,",
						"          Sep,",
						"          Oct,",
						"          Nov,",
						"          Dec,",
						"          CurrentYear,",
						"          each(match(startsWith(name,\"AutoGeneratedYear\")),",
						"               toString($Year+toInteger(split($$,'_')[2])) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDuplicate",
						"RemoveDuplicate keyGenerate(output(CostPlanSystemGeneratedId as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddingCustomKey",
						"AddingCustomKey derive(InsertDate = currentTimestamp(),",
						"          UpdatedDate = currentTimestamp(),",
						"          PlanYear = year(toDate(CurrentYear)),",
						"          ProjectDefinition = \"\") ~> AddingAuditColumns",
						"FlattenXml cast(output(",
						"          AutoGeneratedYear_0 as double,",
						"          AutoGeneratedYear_1 as double,",
						"          AutoGeneratedYear_2 as double,",
						"          AutoGeneratedYear_3 as double,",
						"          AutoGeneratedYear_4 as double,",
						"          AutoGeneratedYear_5 as double,",
						"          AutoGeneratedYear_6 as double,",
						"          AutoGeneratedYear_7 as double,",
						"          AutoGeneratedYear_8 as double,",
						"          AutoGeneratedYear_9 as double,",
						"          AutoGeneratedYear_10 as double",
						"     ),",
						"     errors: true) ~> CastDataTypes",
						"AddingAuditColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:[($TargetFilename)],",
						"     umask: 0664,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     partitionBy('hash', 1)) ~> Costplanparquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Xml')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLSGen2_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL_ET_ActualsInfo')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DECLARE @loc VARCHAR(100);\nSELECT @loc = 'abfss://test@mduse2avangridsa01.dfs.core.windows.net';\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'test_mduse2avangridsa01_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [test_mduse2avangridsa01_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = \"'@loc'\"\n\t)\nGO\n\nCREATE EXTERNAL TABLE dbo.ActualsInfo (\n\t[CostPlanSystemGeneratedId] real,\n\t[DepartmentBusinessUnit] nvarchar(4000),\n\t[DepartmentArea] nvarchar(4000),\n\t[DepartmentCostCenter] nvarchar(4000),\n\t[Company] nvarchar(4000),\n\t[Program] nvarchar(4000),\n\t[SAPWBS] nvarchar(4000),\n\t[ProjectDefinition] nvarchar(4000),\n\t[ProjectName] nvarchar(4000),\n\t[ProjectID] nvarchar(4000),\n\t[ProjectManager] nvarchar(4000),\n\t[ProjectChargeCode] nvarchar(4000),\n\t[ControllingOrder] nvarchar(4000),\n\t[ControllingOrderCIAC] nvarchar(4000),\n\t[Rating] nvarchar(4000),\n\t[Director] nvarchar(4000),\n\t[Prioritization] nvarchar(4000),\n\t[Stage] nvarchar(4000),\n\t[Status] nvarchar(4000),\n\t[RateCaseandCategoryOBSLevel2] nvarchar(4000),\n\t[RateCaseandCategoryOBSLevel3] nvarchar(4000),\n\t[RateCaseandCategoryOBSLevel4] nvarchar(4000),\n\t[CostPlanName] nvarchar(4000),\n\t[CostPlanID] nvarchar(4000),\n\t[PlanofRecord] nvarchar(4000),\n\t[CostPlanType] nvarchar(4000),\n\t[CostType] nvarchar(4000),\n\t[ChargeCode] nvarchar(4000),\n\t[Resource] nvarchar(4000),\n\t[PriorActualsBudget] float,\n\t[PlanYear] int,\n\t[ChargeCodeAbbrv] nvarchar(4000),\n\t[BudgetRatio] float,\n\t[InsertDate] datetime2(7),\n\t[UpdateDate] datetime2(7)\n\t)\n\tWITH (\n\tLOCATION = 'Migrate_Produced/Produced_27_02/Actuals/Info/**',\n\tDATA_SOURCE = [test_mduse2avangridsa01_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.ActualsInfo\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ipsgdb",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL_ET_ActualsMonthly')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'test_mduse2avangridsa01_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [test_mduse2avangridsa01_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://test@mduse2avangridsa01.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE dbo.MonthlyActuals (\n\t[CostPlanSystemGeneratedId] real,\n\t[BudgetYear] int,\n\t[CostPlanName] nvarchar(4000),\n\t[BudgetMonth] nvarchar(4000),\n\t[BudgetAmount] float\n\t)\n\tWITH (\n\tLOCATION = 'Migrate_Produced/Produced_27_02/Actuals/Monthly/**',\n\tDATA_SOURCE = [test_mduse2avangridsa01_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.MonthlyActuals\nGO ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}

